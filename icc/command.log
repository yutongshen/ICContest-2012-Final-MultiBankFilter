#@ # 
#@ # Running icc_shell Version J-2014.09-SP1 for amd64 -- Oct 14, 2014
#@ # Date:   Tue May  1 22:45:14 2018
#@ # Run by: yutongsh@ideal125
#@ 

gui_start
#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/iwidgets4.0.2/lib/iwidgets/iwidgets.tcl

#@ #
#@ # iwidgets.tcl
#@ # ----------------------------------------------------------------------
#@ # Invoked automatically by [incr Tk] upon startup to initialize
#@ # the [incr Widgets] package.
#@ # ----------------------------------------------------------------------
#@ #  AUTHOR: Mark L. Ulferts               EMAIL: mulferts@spd.dsccc.com
#@ #
#@ #  @(#) $Id: iwidgets.tcl.in,v 1.5 2007/06/10 19:28:16 hobbs Exp $
#@ # ----------------------------------------------------------------------
#@ #                Copyright (c) 1995  Mark L. Ulferts
#@ # ======================================================================
#@ # See the file "license.terms" for information on usage and
#@ # redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ 
#@ package require Tcl 8.0
#@ package require Tk 8.0
#@ package require Itcl 3.2
#@ package require Itk 3.2
#@ 
#@ namespace eval ::iwidgets {
#@     namespace export *
#@ 
#@     variable library [file dirname [info script]]
#@     variable version 4.0.2
#@ 
#@     lappend auto_path $iwidgets::library
#@     variable subdir
#@     foreach subdir {generic scripts} {
#@ 	if {[file isdirectory [file join $iwidgets::library $subdir]]} {
#@ 	    lappend auto_path [file join $iwidgets::library $subdir]
#@ 	}
#@     }
#@     unset subdir
#@ }
#@ 
#@ package provide Iwidgets $iwidgets::version
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/iwidgets4.0.2/lib/iwidgets/iwidgets.tcl

open_mw_lib /home/yutongshen/IC_contest/ICContest100_final/icc/CHIP
::iccGUI::open_mw_cel  route
open_mw_cel route
#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/pkgIndex.tcl

#@ if {[catch {package require Tcl}]} return
#@ package ifneeded BWidget 1.9.2 "    package require Tk 8.1.1;    [list tclPkgSetup $dir BWidget 1.9.2 {
#@ {arrow.tcl source {ArrowButton ArrowButton::create ArrowButton::use}}
#@ {labelframe.tcl source {LabelFrame LabelFrame::create LabelFrame::use}}
#@ {labelentry.tcl source {LabelEntry LabelEntry::create LabelEntry::use}}
#@ {bitmap.tcl source {Bitmap::get Bitmap::use}}
#@ {button.tcl source {Button Button::create Button::use}}
#@ {buttonbox.tcl source {ButtonBox ButtonBox::create ButtonBox::use}}
#@ {combobox.tcl source {ComboBox ComboBox::create ComboBox::use}}
#@ {label.tcl source {Label Label::create Label::use}}
#@ {entry.tcl source {Entry Entry::create Entry::use}}
#@ {pagesmgr.tcl source {PagesManager PagesManager::create PagesManager::use}}
#@ {notebook.tcl source {NoteBook NoteBook::create NoteBook::use}}
#@ {panedw.tcl source {PanedWindow PanedWindow::create PanedWindow::use}}
#@ {scrollw.tcl source {ScrolledWindow ScrolledWindow::create ScrolledWindow::use}}
#@ {scrollview.tcl source {ScrollView ScrollView::create ScrollView::use}}
#@ {scrollframe.tcl source {ScrollableFrame ScrollableFrame::create ScrollableFrame::use}}
#@ {panelframe.tcl source {PanelFrame PanelFrame::create PanelFrame::use}}
#@ {progressbar.tcl source {ProgressBar ProgressBar::create ProgressBar::use}}
#@ {progressdlg.tcl source {ProgressDlg ProgressDlg::create ProgressDlg::use}}
#@ {passwddlg.tcl source {PasswdDlg PasswdDlg::create PasswdDlg::use}}
#@ {dragsite.tcl source {DragSite::register DragSite::include DragSite::use}}
#@ {dropsite.tcl source {DropSite::register DropSite::include DropSite::use}}
#@ {separator.tcl source {Separator Separator::create Separator::use}}
#@ {spinbox.tcl source {SpinBox SpinBox::create SpinBox::use}}
#@ {statusbar.tcl source {StatusBar StatusBar::create StatusBar::use}}
#@ {titleframe.tcl source {TitleFrame TitleFrame::create TitleFrame::use}}
#@ {mainframe.tcl source {MainFrame MainFrame::create MainFrame::use}}
#@ {listbox.tcl source {ListBox ListBox::create ListBox::use}}
#@ {tree.tcl source {Tree Tree::create Tree::use}}
#@ {color.tcl source {SelectColor SelectColor::menu SelectColor::dialog SelectColor::setcolor}}
#@ {dynhelp.tcl source {DynamicHelp::configure DynamicHelp::use DynamicHelp::register DynamicHelp::include DynamicHelp::add DynamicHelp::delete}}
#@ {dialog.tcl source {Dialog Dialog::create Dialog::use}}
#@ {messagedlg.tcl source {MessageDlg MessageDlg::create MessageDlg::use}}
#@ {font.tcl source {SelectFont SelectFont::create SelectFont::use SelectFont::loadfont}}
#@ {widgetdoc.tcl source {Widget::generate-doc Widget::generate-widget-doc}}
#@ {wizard.tcl source {Wizard Wizard::create Wizard::use SimpleWizard ClassicWizard}}
#@ {xpm2image.tcl source {xpm-to-image}}
#@ }]; 	[list namespace eval ::BWIDGET {}]; 	[list set ::BWIDGET::LIBRARY $dir];     [list source [file join $dir widget.tcl]];     [list source [file join $dir init.tcl]];     [list source [file join $dir utils.tcl]]; "
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/iwidgets4.0.2/lib/iwidgets/pkgIndex.tcl

#@ # Tcl package index file, version 1.0
#@ 
#@ package ifneeded Iwidgets 4.0.2 [list source [file join $dir iwidgets.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/iwidgets4.0.2/lib/iwidgets/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tix8.4.3/pref/pkgIndex.tcl

#@ # -*-mode: tcl; fill-column: 75; tab-width: 8; coding: iso-latin-1-unix -*-
#@ #
#@ # Tcl package index file, version 1.0
#@ #
#@ # $Id: pkgIndex.tcl,v 1.2 2002/01/24 09:17:02 idiscovery Exp $
#@ #
#@ 
#@ package ifneeded wm_default 1.0 [list source [file join $dir WmDefault.tcl]]
#@ 
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tix8.4.3/pref/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/syn/layout/pkgIndex.tcl

#@ ###
#@ ### This layout package is originally a snapshot of icc/layout 6/20/07.
#@ ### The version is bumped from 1.0 to 1.2 
#@ ### Subsequently merged with ICC on July 2007 and became the only version
#@ ### available 
#@ ### The migration of the package is to facilitate code sharing between
#@ ### applications which need layout view customizations.
#@ ###
#@ ### Updates:
#@ ###        added package snpsPathsSlackVM
#@ ###        added package snpsCellSlackVM 
#@ ###        added package snpsNetCapacitanceVM
#@ ###        added package snpsScanChainVM 
#@ 
#@ package ifneeded snpsVMDialogPathsSlack     1.2 [list source -direct [file join $dir DialogVMPathsSlack.tcl]]
#@ package ifneeded snpsVMDialogCellSlack      1.2 [list source -direct [file join $dir DialogVMCellSlack.tcl]]
#@ package ifneeded snpsVMDialogNetCapacitance 1.2 [list source -direct [file join $dir DialogVMNetCapacitance.tcl]]
#@ package ifneeded snpsVMDialogClockLT 1.2 [list source -direct [file join $dir DialogVMClockLT.tcl]]
#@ 
#@ package ifneeded snpsImportedPathPinsVM     1.2 [list source -direct [file join $dir snpsImportedPathPinsVM.tcl]]
#@ package ifneeded snpsPathsSlackVM     1.2 [list source -direct [file join $dir snpsPathsSlackVM.tcl]]
#@ package ifneeded snpsCellSlackVM      1.2 [list source -direct [file join $dir snpsCellSlackVM.tcl]]
#@ package ifneeded snpsIllegalCellPlacementVM      1.2 [list source -direct [file join $dir snpsIllegalCellPlacementVM.tcl]]
#@ package ifneeded snpsVoltageAreaVM      1.2 [list source -direct [file join $dir snpsVoltageAreaVM.tcl]]
#@ package ifneeded snpsXTalkVM      1.2 [list source -direct [file join $dir snpsXTalkVM.tcl]]
#@ package ifneeded snpsDeltaDelayVM      1.2 [list source -direct [file join $dir snpsDeltaDelayVM.tcl]]
#@ package ifneeded snpsNoiseVM      1.2 [list source -direct [file join $dir snpsNoiseVM.tcl]]
#@ package ifneeded snpsCellDisplacementVM      1.2 [list source -direct [file join $dir snpsCellDisplacementVM.tcl]]
#@ package ifneeded snpsAreaNetConnectionVM      1.2 [list source -direct [file join $dir snpsAreaNetConnectionVM.tcl]]
#@ package ifneeded snpsNetCapacitanceVM 1.2 [list source -direct [file join $dir snpsNetCapacitanceVM.tcl]]
#@ package ifneeded snpsClockLTVM 1.2 [list source -direct [file join $dir snpsClockLTVM.tcl]]
#@ package ifneeded snpsScanChainVM 1.2 [list source -direct [file join $dir snpsScanChainVM.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/syn/layout/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/palettegroup/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsPaletteGroup 1.0 [list source -direct [file join $dir palettegroup.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/palettegroup/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/tcl-dp/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded EkkiInterProcessSelect 1.0 [list source -direct [file join $dir ekkiCrossSelect.tcl]]
#@ package ifneeded snpsInterProcessCommunication 1.0 [list source -direct [file join $dir serv.tcl]]
#@ package ifneeded snpsUpdateTimer 1.0 [list source -direct [file join $dir timer.tcl]]
#@ package ifneeded tcl-dp 1.0 [list source -direct [file join $dir acl.tcl]]\n[list source -direct [file join $dir distribObj.tcl]]\n[list source -direct [file join $dir dp_atclose.tcl]]\n[list source -direct [file join $dir dp_atexit.tcl]]\n[list source -direct [file join $dir ldelete.tcl]]\n[list source -direct [file join $dir oo.tcl]]\n[list source -direct [file join $dir rpc.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/tcl-dp/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/menus/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsMenus 1.0 [list source -direct [file join $dir base.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/menus/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/regressionToolkit/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsGUITest 1.0 [list source -direct [file join $dir base.tcl]]
#@ package ifneeded snpsDialogTest 1.0 [list source -direct [file join $dir dialogTest.tcl]]
#@ package ifneeded snpsCommandHelpTest 1.0 [list source -direct [file join $dir commandHelpTest.tcl]]
#@ package ifneeded snpsGUIAppSpecifics 1.0 [list source -direct [file join $dir appSpecifics.tcl]]
#@ package ifneeded snpsQtclCoreTests 1.0 [list source -direct [file join $dir snpsQtclCoreTests.tcl]]
#@ package ifneeded snpsTestBinning 1.0 [list source -direct [file join $dir binning.tcl]]
#@ package ifneeded snpsTestDialogAddFaninFanout 1.0 [list source -direct [file join $dir dialogAddFaninFanout.tcl]]
#@ package ifneeded snpsTestDialogAddPaths 1.0 [list source -direct [file join $dir dialogAddPaths.tcl]]
#@ package ifneeded snpsTestDialogEndpointSlackHistogram 1.0 [list source -direct [file join $dir dialogEndpointSlackHistogram.tcl]]
#@ package ifneeded snpsTestDialogNetCapacitanceHistogram 1.0 [list source -direct [file join $dir dialogNetCapacitanceHistogram.tcl]]
#@ package ifneeded snpsTestDialogObjectChooser 1.0 [list source -direct [file join $dir dialogObjectChooser.tcl]]
#@ package ifneeded snpsTestDialogPathsSlackHistogram 1.0 [list source -direct [file join $dir dialogPathsSlackHistogram.tcl]]
#@ package ifneeded snpsTestDialogs 1.0 [list source -direct [file join $dir dialogs.tcl]]
#@ package ifneeded snpsTestDialogSelectByName 1.0 [list source -direct [file join $dir dialogSelectByName.tcl]]
#@ package ifneeded snpsTestHistogram 1.0 [list source -direct [file join $dir histogram.tcl]]
#@ package ifneeded snpsTestList 1.0 [list source -direct [file join $dir list.tcl]]
#@ package ifneeded snpsTestListUtils 1.0 [list source -direct [file join $dir listUtils.tcl]]
#@ package ifneeded snpsTestMenu 1.0 [list source -direct [file join $dir menu.tcl]]
#@ package ifneeded snpsTestMouse 1.0 [list source -direct [file join $dir mouse.tcl]]
#@ package ifneeded snpsTestNl 1.0 [list source -direct [file join $dir nl.tcl]]
#@ package ifneeded snpsWriteXMLNl 1.0 [list source -direct [file join $dir writeXMLNl.tcl]]
#@ package ifneeded snpsTestObjectAtPoint 1.0 [list source -direct [file join $dir testObjectAtPoint.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/regressionToolkit/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/histogram/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsHistogram 1.0 [list source -direct [file join $dir base.tcl]]
#@ package ifneeded snpsHistogramDialogBottleneck 1.0 [list source -direct [file join $dir DialogBottleneck.tcl]]
#@ package ifneeded snpsHistogramDialogTable 1.0 [list source -direct [file join $dir DialogTable.tcl]]
#@ package ifneeded snpsHistogramDialogBumpNoise 1.0 [list source -direct [file join $dir DialogBumpNoise.tcl]]
#@ package ifneeded snpsHistogramDialogBumpVoltage 1.0 [list source -direct [file join $dir DialogBumpVoltage.tcl]]
#@ package ifneeded snpsHistogramDialogDRC 1.0 [list source -direct [file join $dir DialogDRC.tcl]]
#@ package ifneeded snpsHistogramDialogDeltaDelay 1.0 [list source -direct [file join $dir DialogDeltaDelay.tcl]]
#@ package ifneeded snpsHistogramDialogEndpointSlack 1.0 [list source -direct [file join $dir DialogEndpointSlack.tcl]]
#@ package ifneeded snpsHistogramDialogNetCapacitance 1.0 [list source -direct [file join $dir DialogNetCapacitance.tcl]]
#@ package ifneeded snpsHistogramDialogPathsSlack 1.0 [list source -direct [file join $dir DialogPathsSlack.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/histogram/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/fanoutviewer/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsCTB 1.0 [list source -direct [file join $dir ctb.tcl]]
#@ package ifneeded snpsCTBInternal 1.0 [list source -direct [file join $dir ctbInternal.tcl]]
#@ package ifneeded snpsFanoutViewer 1.0 [list source -direct [file join $dir base.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/fanoutviewer/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/libviewer/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsLibViewer 1.0 [list source -direct [file join $dir base.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/libviewer/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/WindowFrameWork/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsWindowFrameWork 1.0 [list source -direct [file join $dir windowFrameWork.tcl]]
#@ package ifneeded snpsBusyCursorSkipList 1.0 [list source -direct [file join $dir skipBusyCursorCmdList.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/WindowFrameWork/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/tq/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsTkStyle 1.0 [list source -direct [file join $dir snpsTkStyle.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/tq/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/strokes/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded strokes 1.0 [list source -direct [file join $dir stroke_defaults.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/strokes/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/view/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/view/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/highlight/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded Highlight 1.0 [list source -direct [file join $dir highlight.tcl]]
#@ package ifneeded snpsHighlight 1.0 [list source -direct [file join $dir highlight.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/highlight/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/opdlg/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsOpDlg 1.0 [list source -direct [file join $dir base.tcl]]\n[list source -direct [file join $dir data.tcl]]\n[list source -direct [file join $dir frame1.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/opdlg/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/tiledview/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsTiledView 1.0 [list source -direct [file join $dir tiledview.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/tiledview/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/select/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsSelectDialogFanInOut 1.0 [list source -direct [file join $dir DialogSelectFanInOut.tcl]]
#@ package ifneeded snpsSelection 1.0 [list source -direct [file join $dir base.tcl]]
#@ package ifneeded snpsSelectionInternal 1.0 [list source -direct [file join $dir baseInternal.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/select/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/acg/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsAcg 1.0 [list source -direct [file join $dir base.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/acg/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/schematic/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsSchematic 1.0 [list source -direct [file join $dir base.tcl]]
#@ package ifneeded snpsSchematicDialogPathSchematicAddFanInOut 1.0 [list source -direct [file join $dir DialogPathSchematicFanInOut.tcl]]
#@ package ifneeded snpsSchematicDialogPathSchematicAddPaths 1.0 [list source -direct [file join $dir DialogPathSchematicAddPaths.tcl]]
#@ package ifneeded snpsSchematicDialogSchematicSizeCell 1.0 [list source -direct [file join $dir DialogSchematicWhatIf.tcl]]
#@ package ifneeded snpsSchematicEnable 1.0 [list source -direct [file join $dir enable.tcl]]
#@ package ifneeded snpsSchematicMethod 1.0 [list source -direct [file join $dir method.tcl]]
#@ package ifneeded snpsSchematicNetlist 1.0 [list source -direct [file join $dir netlist.tcl]]
#@ package ifneeded snpsSchematicNetlistInternal 1.0 [list source -direct [file join $dir schematicNetlistInternal.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/schematic/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/profiler/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsProfiler 1.0 [list source -direct [file join $dir base.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/profiler/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/hierarchy/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsDesignObjectBrowser 1.0 [list source -direct [file join $dir DesignObjectBrowser.tcl]]
#@ package ifneeded snpsHier 1.0 [list source -direct [file join $dir base.tcl]]
#@ package ifneeded snpsHier::children 1.0 [list source -direct [file join $dir children.tcl]]
#@ package ifneeded snpsHier::columns 1.0 [list source -direct [file join $dir columns.tcl]]
#@ package ifneeded snpsHier::dialogs 1.0 [list source -direct [file join $dir dialogs.tcl]]
#@ package ifneeded snpsHier::hierarchies 1.0 [list source -direct [file join $dir hierarchies.tcl]]
#@ package ifneeded snpsHier::rootFcts 1.0 [list source -direct [file join $dir rootFcts.tcl]]
#@ package ifneeded snpsHierExample1 1.0 [list source -direct [file join $dir Example1.tcl]]
#@ package ifneeded snpsHierExample2 1.0 [list source -direct [file join $dir Example2.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/hierarchy/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/table/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsTable 1.0 [list source -direct [file join $dir table.tcl]]
#@ package ifneeded snpsTableInternal 1.0 [list source -direct [file join $dir table_internal.tcl]]
#@ package ifneeded snpsTableCustomize 1.0 [list source -direct [file join $dir table_customize.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/table/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/mrupalette/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsMRUPalette 1.0 [list source -direct [file join $dir mrupalette.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/mrupalette/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/qtcl/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsQtcl 1.0           [list source -direct [file join $dir .synopsys_qtcl.tcl]]
#@ package ifneeded snpsQtclExtensions 1.0 [list source -direct [file join $dir qtcl_extensions.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/qtcl/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/dialogs/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsDialogsBinsOnlyInformation 1.0 [list source -direct [file join $dir BinsOnlyInformation.tcl]]
#@ package ifneeded snpsDialogsCompileLinkDesign 1.0 [list source -direct [file join $dir CompileLinkDesign.tcl]]
#@ package ifneeded snpsDialogsFanInOutInfo 1.0 [list source -direct [file join $dir FanInOutInfo.tcl]]
#@ package ifneeded snpsDialogsFileChooser 1.0 [list source -direct [file join $dir FileChooser.tcl]]
#@ package ifneeded snpsDialogsHistBin1Information 1.0 [list source -direct [file join $dir HistBin1Information.tcl]]
#@ package ifneeded snpsDialogsHistBinInformation 1.0 [list source -direct [file join $dir HistBinInformation.tcl]]
#@ package ifneeded snpsDialogsHistBumpNoise 1.0 [list source -direct [file join $dir HistBumpNoise.tcl]]
#@ package ifneeded snpsDialogsHistBumpVoltage 1.0 [list source -direct [file join $dir HistBumpVoltage.tcl]]
#@ package ifneeded snpsDialogsHistDeltaDelay 1.0 [list source -direct [file join $dir HistDeltaDelay.tcl]]
#@ package ifneeded snpsDialogsClockMapInformation 1.0 [list source -direct [file join $dir ClockMapInformation.tcl]]
#@ package ifneeded snpsDialogsNumberOfLevelsChooser 1.0 [list source -direct [file join $dir NumberOfLevelsChooser.tcl]]
#@ package ifneeded snpsDialogsObjectChooser 1.0 [list source -direct [file join $dir ObjectChooser.tcl]]
#@ package ifneeded snpsDialogsObjectListInfo 1.0 [list source -direct [file join $dir ObjectListInfo.tcl]]
#@ package ifneeded snpsDialogsPathPinSimpleInfo 1.0 [list source -direct [file join $dir PathPinSimpleInfo.tcl]]
#@ package ifneeded snpsDialogsPathsBasicInfo 1.0 [list source -direct [file join $dir PathsBasicInfo.tcl]]
#@ package ifneeded snpsDialogsPathsBasicSimpleInfo 1.0 [list source -direct [file join $dir PathsBasicSimpleInfo.tcl]]
#@ package ifneeded snpsDialogsReportOutputOptionInfo 1.0 [list source -direct [file join $dir ReportOutputOptionInfo.tcl]]
#@ package ifneeded snpsDialogsSchematicWhatIf 1.0 [list source -direct [file join $dir SchematicWhatIf.tcl]]
#@ package ifneeded snpsDialogsSlctOperationInfo 1.0 [list source -direct [file join $dir SlctOperationInfo.tcl]]
#@ package ifneeded snpsDialogsWindowReuseInfo 1.0 [list source -direct [file join $dir WindowReuseInfo.tcl]]
#@ package ifneeded snpsDialogsPath 1.0 [list source -direct [file join $dir PathDialog.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/dialogs/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/commandform/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsCommandForm 1.0 [list source -direct [file join $dir commandform.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/commandform/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/pathinspector/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsPathInspector 1.0 [list source -direct [file join $dir base.tcl]]\n[list source -direct [file join $dir create_window_and_menu.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/pathinspector/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/setup/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsCommonSetup 1.0 [list source -direct [file join $dir snpsCommonSetup.tcl]]
#@ package ifneeded snpsCustomize 1.0 [list source -direct [file join $dir snpsCustomize.tcl]]
#@ package ifneeded snpsCollections 1.0 [list source -direct [file join $dir snpsCollections.tcl]]
#@ package ifneeded snpsProcheck 1.0 [list source -direct [file join $dir snpsProcheck.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/setup/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/misc/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsCalculateWindowGeometry 1.0 [list source -direct [file join $dir calculateWindowGeometry.tcl]]
#@ package ifneeded snpsCommonViewMenu 1.0 [list source -direct [file join $dir viewmenu.tcl]]
#@ package ifneeded snpsCopyPaste 1.0 [list source -direct [file join $dir copyPaste.tcl]]
#@ package ifneeded snpsCreateViewType 1.0 [list source -direct [file join $dir createViewType.tcl]]
#@ package ifneeded snpsCurrInst 1.0 [list source -direct [file join $dir snpsCurrInst.tcl]]
#@ package ifneeded snpsDebug 1.0 [list source -direct [file join $dir debug.tcl]]
#@ package ifneeded snpsDemo 1.0 [list source -direct [file join $dir demo.tcl]]
#@ package ifneeded snpsFile 1.0 [list source -direct [file join $dir file.tcl]]
#@ package ifneeded snpsFollowNlFactory 1.0 [list source -direct [file join $dir followNlFactory.tcl]]
#@ package ifneeded snpsGuiMenuEnable 1.0 [list source -direct [file join $dir GuiMenuEnable.tcl]]
#@ package ifneeded snpsInfotips 1.0 [list source -direct [file join $dir infotip.tcl]]
#@ package ifneeded snpsLoadsDrivers 1.0 [list source -direct [file join $dir loadsDrivers.tcl]]
#@ package ifneeded snpsMisc 1.0 [list source -direct [file join $dir base.tcl]]
#@ package ifneeded snpsMiscAnchorPoint 1.0 [list source -direct [file join $dir anchor.tcl]]
#@ package ifneeded snpsMiscDialogObjectChooser 1.0 [list source -direct [file join $dir DialogObjectChooser.tcl]]
#@ package ifneeded snpsMiscEditMovebounds 1.0 [list source -direct [file join $dir EditMovebounds.tcl]]
#@ package ifneeded snpsMiscSetting 1.0 [list source -direct [file join $dir setting.tcl]]
#@ package ifneeded snpsMiscTiming 1.0 [list source -direct [file join $dir timing.tcl]]
#@ package ifneeded snpsMiscViewportHistory 1.0 [list source -direct [file join $dir viewporthistory.tcl]]
#@ package ifneeded snpsOutput 1.0 [list source -direct [file join $dir output.tcl]]
#@ package ifneeded snpsQObjectViewer 1.0 [list source -direct [file join $dir qobjectviewer.tcl]]
#@ package ifneeded snpsStack 1.0 [list source -direct [file join $dir stack.tcl]]
#@ package ifneeded snpsTypedText 1.0 [list source -direct [file join $dir typedText.tcl]]
#@ package ifneeded snpsViewMgr 1.0 [list source -direct [file join $dir viewmgr.tcl]]
#@ package ifneeded snpsMiscPreset 1.0 [list source -direct [file join $dir preset.tcl]]
#@ package ifneeded snpsTaskAssistant 1.0 [list source -direct [file join $dir taskassistant.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/misc/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/layout/pkgIndex.tcl

#@ package ifneeded snpsLayout                 1.2 [list source -direct [file join $dir layout.tcl]]
#@ package ifneeded snpsLayoutTools            1.2 [list source -direct [file join $dir snpsLayoutTools.tcl]]
#@ package ifneeded snpsLayoutLayers           1.2 [list source -direct [file join $dir layout_layers.tcl]]
#@ package ifneeded snpsLayoutTest             1.2 [list source -direct [file join $dir layout_test.tcl]]
#@ 
#@ package ifneeded colSrv                    1.2 [list source -direct [file join $dir colSrv.tcl]]
#@ package ifneeded snpsVM                     1.2 [list source -direct [file join $dir snpsVM.tcl]]
#@ package ifneeded snpsMM                     1.2 [list source -direct [file join $dir snpsMM.tcl]]
#@ 
#@ package ifneeded snpsLayoutPreferences      1.0 [list source -direct [file join $dir preferences.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/layout/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/docBrowser/pkgIndex.tcl

#@ 
#@ package ifneeded snpsDocBrowser 1.0 [list source -direct [file join $dir docBrowser.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/docBrowser/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/timing/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsTimingGUI 1.0 [list source -direct [file join $dir base.tcl]]
#@ 
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/common/timing/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/gui/dv/pkgIndex.tcl

#@ 
#@ package ifneeded snpsPathAnalyzer 1.0 [list source -direct [file join $dir dv_path_cat_view.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/gui/dv/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/snpsTclPro/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex -direct" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsTclPro 1.0 [list source [file join $dir			snpsTclPro.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/snpsTclPro/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/snpsTest/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex -direct" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsTest 1.0 [list source [file join $dir snpsTest.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/snpsTest/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/snpsUtils/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex -direct" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded snpsUtils 1.0 [list source [file join $dir snpsUtils.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/snpsUtils/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/pkgIndex.tcl

#@ package ifneeded Itcl 3.4 {load {} Itcl}
#@ package ifneeded tbcload 1.7 {load {} tbcload}
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/snps_tcl/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/http1.0/pkgIndex.tcl

#@ # Tcl package index file, version 1.0
#@ # This file is generated by the "pkg_mkIndex" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ package ifneeded http 1.0 [list tclPkgSetup $dir http 1.0 {{http.tcl source {httpCopyDone httpCopyStart httpEof httpEvent httpFinish httpMapReply httpProxyRequired http_code http_config http_data http_formatQuery http_get http_reset http_size http_status http_wait}}}]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/http1.0/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/platform/pkgIndex.tcl

#@ package ifneeded platform        1.0.10 [list source [file join $dir platform.tcl]]
#@ package ifneeded platform::shell 1.1.4 [list source [file join $dir shell.tcl]]
#@ 
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/platform/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/msgcat/pkgIndex.tcl

#@ if {![package vsatisfies [package provide Tcl] 8.5]} {return}
#@ package ifneeded msgcat 1.4.5 [list source [file join $dir msgcat.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/msgcat/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/dde/pkgIndex.tcl

#@ if {![package vsatisfies [package provide Tcl] 8]} return
#@ if {[info sharedlibextension] != ".dll"} return
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/dde/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/http/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ 
#@ if {![package vsatisfies [package provide Tcl] 8.4]} {return}
#@ package ifneeded http 2.7.9 [list tclPkgSetup $dir http 2.7.9 {{http.tcl source {::http::config ::http::formatQuery ::http::geturl ::http::reset ::http::wait ::http::register ::http::unregister ::http::mapReply}}}]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/http/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/tcltest/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex -direct" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ if {![package vsatisfies [package provide Tcl] 8.5]} {return}
#@ package ifneeded tcltest 2.3.4 [list source [file join $dir tcltest.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/tcltest/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/opt/pkgIndex.tcl

#@ # Tcl package index file, version 1.1
#@ # This file is generated by the "pkg_mkIndex -direct" command
#@ # and sourced either when an application starts up or
#@ # by a "package unknown" script.  It invokes the
#@ # "package ifneeded" command to set up package-related
#@ # information so that packages will be loaded automatically
#@ # in response to "package require" commands.  When this
#@ # script is sourced, the variable $dir must contain the
#@ # full path name of this file's directory.
#@ 
#@ if {![package vsatisfies [package provide Tcl] 8.2]} {return}
#@ package ifneeded opt 0.4.5 [list source [file join $dir optparse.tcl]]
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/opt/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/reg/pkgIndex.tcl

#@ if {![package vsatisfies [package provide Tcl] 8]} return
#@ if {[info sharedlibextension] != ".dll"} return
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/tcllib/lib/tcl8.5/reg/pkgIndex.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/widget.tcl

#@ # ----------------------------------------------------------------------------
#@ #  widget.tcl
#@ #  This file is part of Unifix BWidget Toolkit
#@ #  $Id: widget.tcl,v 1.35 2009/07/02 16:22:18 oehhar Exp $
#@ # ----------------------------------------------------------------------------
#@ #  Index of commands:
#@ #     - Widget::tkinclude
#@ #     - Widget::bwinclude
#@ #     - Widget::declare
#@ #     - Widget::addmap
#@ #     - Widget::init
#@ #     - Widget::destroy
#@ #     - Widget::setoption
#@ #     - Widget::configure
#@ #     - Widget::cget
#@ #     - Widget::subcget
#@ #     - Widget::hasChanged
#@ #     - Widget::options
#@ #     - Widget::_get_tkwidget_options
#@ #     - Widget::_test_tkresource
#@ #     - Widget::_test_bwresource
#@ #     - Widget::_test_synonym
#@ #     - Widget::_test_string
#@ #     - Widget::_test_flag
#@ #     - Widget::_test_enum
#@ #     - Widget::_test_int
#@ #     - Widget::_test_boolean
#@ # ----------------------------------------------------------------------------
#@ # Each megawidget gets a namespace of the same name inside the Widget namespace
#@ # Each of these has an array opt, which contains information about the 
#@ # megawidget options.  It maps megawidget options to a list with this format:
#@ #     {optionType defaultValue isReadonly {additionalOptionalInfo}}
#@ # Option types and their additional optional info are:
#@ #	TkResource	{genericTkWidget genericTkWidgetOptionName}
#@ #	BwResource	{nothing}
#@ #	Enum		{list of enumeration values}
#@ #	Int		{Boundary information}
#@ #	Boolean		{nothing}
#@ #	String		{nothing}
#@ #	Flag		{string of valid flag characters}
#@ #	Synonym		{nothing}
#@ #	Color		{nothing}
#@ #
#@ # Next, each namespace has an array map, which maps class options to their
#@ # component widget options:
#@ #	map(-foreground) => {.e -foreground .f -foreground}
#@ #
#@ # Each has an array ${path}:opt, which contains the value of each megawidget
#@ # option for a particular instance $path of the megawidget, and an array
#@ # ${path}:mod, which stores the "changed" status of configuration options.
#@ 
#@ # Steps for creating a bwidget megawidget:
#@ # 1. parse args to extract subwidget spec
#@ # 2. Create frame with appropriate class and command line options
#@ # 3. Get initialization options from optionDB, using frame
#@ # 4. create subwidgets
#@ 
#@ # Uses newer string operations
#@ package require Tcl 8.1.1
#@ 
#@ namespace eval Widget {
#@     variable _optiontype
#@     variable _class
#@     variable _tk_widget
#@ 
#@     # This controls whether we try to use themed widgets from Tile
#@     variable _theme 0
#@ 
#@     variable _aqua [expr {($::tcl_version >= 8.4) &&
#@ 			  [string equal [tk windowingsystem] "aqua"]}]
#@ 
#@     array set _optiontype {
#@         TkResource Widget::_test_tkresource
#@         BwResource Widget::_test_bwresource
#@         Enum       Widget::_test_enum
#@         Int        Widget::_test_int
#@         Boolean    Widget::_test_boolean
#@         String     Widget::_test_string
#@         Flag       Widget::_test_flag
#@         Synonym    Widget::_test_synonym
#@         Color      Widget::_test_color
#@         Padding    Widget::_test_padding
#@     }
#@ 
#@     proc use {} {}
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::tkinclude
#@ #     Includes tk widget resources to BWidget widget.
#@ #  class      class name of the BWidget
#@ #  tkwidget   tk widget to include
#@ #  subpath    subpath to configure
#@ #  args       additionnal args for included options
#@ # ----------------------------------------------------------------------------
#@ proc Widget::tkinclude { class tkwidget subpath args } {
#@     foreach {cmd lopt} $args {
#@         # cmd can be
#@         #   include      options to include            lopt = {opt ...}
#@         #   remove       options to remove             lopt = {opt ...}
#@         #   rename       options to rename             lopt = {opt newopt ...}
#@         #   prefix       options to prefix             lopt = {pref opt opt ..}
#@         #   initialize   set default value for options lopt = {opt value ...}
#@         #   readonly     set readonly flag for options lopt = {opt flag ...}
#@         switch -- $cmd {
#@             remove {
#@                 foreach option $lopt {
#@                     set remove($option) 1
#@                 }
#@             }
#@             include {
#@                 foreach option $lopt {
#@                     set include($option) 1
#@                 }
#@             }
#@             prefix {
#@                 set prefix [lindex $lopt 0]
#@                 foreach option [lrange $lopt 1 end] {
#@                     set rename($option) "-$prefix[string range $option 1 end]"
#@                 }
#@             }
#@             rename     -
#@             readonly   -
#@             initialize {
#@                 array set $cmd $lopt
#@             }
#@             default {
#@                 return -code error "invalid argument \"$cmd\""
#@             }
#@         }
#@     }
#@ 
#@     namespace eval $class {}
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::map classmap
#@     upvar 0 ${class}::map$subpath submap
#@     upvar 0 ${class}::optionExports exports
#@ 
#@     set foo [$tkwidget ".ericFoo###"]
#@     # create resources informations from tk widget resources
#@     foreach optdesc [_get_tkwidget_options $tkwidget] {
#@         set option [lindex $optdesc 0]
#@         if { (![info exists include] || [info exists include($option)]) &&
#@              ![info exists remove($option)] } {
#@             if { [llength $optdesc] == 3 } {
#@                 # option is a synonym
#@                 set syn [lindex $optdesc 1]
#@                 if { ![info exists remove($syn)] } {
#@                     # original option is not removed
#@                     if { [info exists rename($syn)] } {
#@                         set classopt($option) [list Synonym $rename($syn)]
#@                     } else {
#@                         set classopt($option) [list Synonym $syn]
#@                     }
#@                 }
#@             } else {
#@                 if { [info exists rename($option)] } {
#@                     set realopt $option
#@                     set option  $rename($option)
#@                 } else {
#@                     set realopt $option
#@                 }
#@                 if { [info exists initialize($option)] } {
#@                     set value $initialize($option)
#@                 } else {
#@                     set value [lindex $optdesc 1]
#@                 }
#@                 if { [info exists readonly($option)] } {
#@                     set ro $readonly($option)
#@                 } else {
#@                     set ro 0
#@                 }
#@                 set classopt($option) 			[list TkResource $value $ro [list $tkwidget $realopt]]
#@ 
#@ 		# Add an option database entry for this option
#@ 		set optionDbName ".[lindex [_configure_option $realopt ""] 0]"
#@ 		if { ![string equal $subpath ":cmd"] } {
#@ 		    set optionDbName "$subpath$optionDbName"
#@ 		}
#@ 		option add *${class}$optionDbName $value widgetDefault
#@ 		lappend exports($option) "$optionDbName"
#@ 
#@ 		# Store the forward and backward mappings for this
#@ 		# option <-> realoption pair
#@                 lappend classmap($option) $subpath "" $realopt
#@ 		set submap($realopt) $option
#@             }
#@         }
#@     }
#@     ::destroy $foo
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::bwinclude
#@ #     Includes BWidget resources to BWidget widget.
#@ #  class    class name of the BWidget
#@ #  subclass BWidget class to include
#@ #  subpath  subpath to configure
#@ #  args     additionnal args for included options
#@ # ----------------------------------------------------------------------------
#@ proc Widget::bwinclude { class subclass subpath args } {
#@     foreach {cmd lopt} $args {
#@         # cmd can be
#@         #   include      options to include            lopt = {opt ...}
#@         #   remove       options to remove             lopt = {opt ...}
#@         #   rename       options to rename             lopt = {opt newopt ...}
#@         #   prefix       options to prefix             lopt = {prefix opt opt ...}
#@         #   initialize   set default value for options lopt = {opt value ...}
#@         #   readonly     set readonly flag for options lopt = {opt flag ...}
#@         switch -- $cmd {
#@             remove {
#@                 foreach option $lopt {
#@                     set remove($option) 1
#@                 }
#@             }
#@             include {
#@                 foreach option $lopt {
#@                     set include($option) 1
#@                 }
#@             }
#@             prefix {
#@                 set prefix [lindex $lopt 0]
#@                 foreach option [lrange $lopt 1 end] {
#@                     set rename($option) "-$prefix[string range $option 1 end]"
#@                 }
#@             }
#@             rename     -
#@             readonly   -
#@             initialize {
#@                 array set $cmd $lopt
#@             }
#@             default {
#@                 return -code error "invalid argument \"$cmd\""
#@             }
#@         }
#@     }
#@ 
#@     namespace eval $class {}
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::map classmap
#@     upvar 0 ${class}::map$subpath submap
#@     upvar 0 ${class}::optionExports exports
#@     upvar 0 ${subclass}::opt subclassopt
#@     upvar 0 ${subclass}::optionExports subexports
#@ 
#@     # create resources informations from BWidget resources
#@     foreach {option optdesc} [array get subclassopt] {
#@ 	set subOption $option
#@         if { (![info exists include] || [info exists include($option)]) &&
#@              ![info exists remove($option)] } {
#@             set type [lindex $optdesc 0]
#@             if { [string equal $type "Synonym"] } {
#@                 # option is a synonym
#@                 set syn [lindex $optdesc 1]
#@                 if { ![info exists remove($syn)] } {
#@                     if { [info exists rename($syn)] } {
#@                         set classopt($option) [list Synonym $rename($syn)]
#@                     } else {
#@                         set classopt($option) [list Synonym $syn]
#@                     }
#@                 }
#@             } else {
#@                 if { [info exists rename($option)] } {
#@                     set realopt $option
#@                     set option  $rename($option)
#@                 } else {
#@                     set realopt $option
#@                 }
#@                 if { [info exists initialize($option)] } {
#@                     set value $initialize($option)
#@                 } else {
#@                     set value [lindex $optdesc 1]
#@                 }
#@                 if { [info exists readonly($option)] } {
#@                     set ro $readonly($option)
#@                 } else {
#@                     set ro [lindex $optdesc 2]
#@                 }
#@                 set classopt($option) 			[list $type $value $ro [lindex $optdesc 3]]
#@ 
#@ 		# Add an option database entry for this option
#@ 		foreach optionDbName $subexports($subOption) {
#@ 		    if { ![string equal $subpath ":cmd"] } {
#@ 			set optionDbName "$subpath$optionDbName"
#@ 		    }
#@ 		    # Only add the option db entry if we are overriding the
#@ 		    # normal widget default
#@ 		    if { [info exists initialize($option)] } {
#@ 			option add *${class}$optionDbName $value 				widgetDefault
#@ 		    }
#@ 		    lappend exports($option) "$optionDbName"
#@ 		}
#@ 
#@ 		# Store the forward and backward mappings for this
#@ 		# option <-> realoption pair
#@                 lappend classmap($option) $subpath $subclass $realopt
#@ 		set submap($realopt) $option
#@             }
#@         }
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::declare
#@ #    Declares new options to BWidget class.
#@ # ----------------------------------------------------------------------------
#@ proc Widget::declare { class optlist } {
#@     variable _optiontype
#@ 
#@     namespace eval $class {}
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::optionExports exports
#@     upvar 0 ${class}::optionClass optionClass
#@ 
#@     foreach optdesc $optlist {
#@         set option  [lindex $optdesc 0]
#@         set optdesc [lrange $optdesc 1 end]
#@         set type    [lindex $optdesc 0]
#@ 
#@         if { ![info exists _optiontype($type)] } {
#@             # invalid resource type
#@             return -code error "invalid option type \"$type\""
#@         }
#@ 
#@         if { [string equal $type "Synonym"] } {
#@             # test existence of synonym option
#@             set syn [lindex $optdesc 1]
#@             if { ![info exists classopt($syn)] } {
#@                 return -code error "unknow option \"$syn\" for Synonym \"$option\""
#@             }
#@             set classopt($option) [list Synonym $syn]
#@             continue
#@         }
#@ 
#@         # all other resource may have default value, readonly flag and
#@         # optional arg depending on type
#@         set value [lindex $optdesc 1]
#@         set ro    [lindex $optdesc 2]
#@         set arg   [lindex $optdesc 3]
#@ 
#@         if { [string equal $type "BwResource"] } {
#@             # We don't keep BwResource. We simplify to type of sub BWidget
#@             set subclass    [lindex $arg 0]
#@             set realopt     [lindex $arg 1]
#@             if { ![string length $realopt] } {
#@                 set realopt $option
#@             }
#@ 
#@             upvar 0 ${subclass}::opt subclassopt
#@             if { ![info exists subclassopt($realopt)] } {
#@                 return -code error "unknow option \"$realopt\""
#@             }
#@             set suboptdesc $subclassopt($realopt)
#@             if { $value == "" } {
#@                 # We initialize default value
#@                 set value [lindex $suboptdesc 1]
#@             }
#@             set type [lindex $suboptdesc 0]
#@             set ro   [lindex $suboptdesc 2]
#@             set arg  [lindex $suboptdesc 3]
#@ 	    set optionDbName ".[lindex [_configure_option $option ""] 0]"
#@ 	    option add *${class}${optionDbName} $value widgetDefault
#@ 	    set exports($option) $optionDbName
#@             set classopt($option) [list $type $value $ro $arg]
#@             continue
#@         }
#@ 
#@         # retreive default value for TkResource
#@         if { [string equal $type "TkResource"] } {
#@             set tkwidget [lindex $arg 0]
#@ 	    set foo [$tkwidget ".ericFoo##"]
#@             set realopt  [lindex $arg 1]
#@             if { ![string length $realopt] } {
#@                 set realopt $option
#@             }
#@             set tkoptions [_get_tkwidget_options $tkwidget]
#@             if { ![string length $value] } {
#@                 # We initialize default value
#@ 		set ind [lsearch $tkoptions [list $realopt *]]
#@                 set value [lindex [lindex $tkoptions $ind] end]
#@             }
#@ 	    set optionDbName ".[lindex [_configure_option $option ""] 0]"
#@ 	    option add *${class}${optionDbName} $value widgetDefault
#@ 	    set exports($option) $optionDbName
#@             set classopt($option) [list TkResource $value $ro 		    [list $tkwidget $realopt]]
#@ 	    set optionClass($option) [lindex [$foo configure $realopt] 1]
#@ 	    ::destroy $foo
#@             continue
#@         }
#@ 
#@ 	set optionDbName ".[lindex [_configure_option $option ""] 0]"
#@ 	option add *${class}${optionDbName} $value widgetDefault
#@ 	set exports($option) $optionDbName
#@         # for any other resource type, we keep original optdesc
#@         set classopt($option) [list $type $value $ro $arg]
#@     }
#@ }
#@ 
#@ 
#@ proc Widget::define { class filename args } {
#@     variable ::BWidget::use
#@     set use($class)      $args
#@     set use($class,file) $filename
#@     lappend use(classes) $class
#@ 
#@     if {[set x [lsearch -exact $args "-classonly"]] > -1} {
#@ 	set args [lreplace $args $x $x]
#@     } else {
#@ 	interp alias {} ::${class} {} ${class}::create
#@ 	proc ::${class}::use {} {}
#@ 
#@ 	bind $class <Destroy> [list Widget::destroy %W]
#@     }
#@ 
#@     foreach class $args { ${class}::use }
#@ }
#@ 
#@ 
#@ proc Widget::create { class path {rename 1} } {
#@     if {$rename} { rename $path ::$path:cmd }
#@     proc ::$path { cmd args }     	[subst {return \[eval \[linsert \$args 0 ${class}::\$cmd [list $path]\]\]}]
#@     return $path
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::addmap
#@ # ----------------------------------------------------------------------------
#@ proc Widget::addmap { class subclass subpath options } {
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::optionExports exports
#@     upvar 0 ${class}::optionClass optionClass
#@     upvar 0 ${class}::map classmap
#@     upvar 0 ${class}::map$subpath submap
#@ 
#@     foreach {option realopt} $options {
#@         if { ![string length $realopt] } {
#@             set realopt $option
#@         }
#@ 	set val [lindex $classopt($option) 1]
#@ 	set optDb ".[lindex [_configure_option $realopt ""] 0]"
#@ 	if { ![string equal $subpath ":cmd"] } {
#@ 	    set optDb "$subpath$optDb"
#@ 	}
#@ 	option add *${class}${optDb} $val widgetDefault
#@ 	lappend exports($option) $optDb
#@ 	# Store the forward and backward mappings for this
#@ 	# option <-> realoption pair
#@         lappend classmap($option) $subpath $subclass $realopt
#@ 	set submap($realopt) $option
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::syncoptions
#@ # ----------------------------------------------------------------------------
#@ proc Widget::syncoptions { class subclass subpath options } {
#@     upvar 0 ${class}::sync classync
#@ 
#@     foreach {option realopt} $options {
#@         if { ![string length $realopt] } {
#@             set realopt $option
#@         }
#@         set classync($option) [list $subpath $subclass $realopt]
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::init
#@ # ----------------------------------------------------------------------------
#@ proc Widget::init { class path options } {
#@     variable _inuse
#@     variable _class
#@     variable _optiontype
#@ 
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::$path:opt  pathopt
#@     upvar 0 ${class}::$path:mod  pathmod
#@     upvar 0 ${class}::map classmap
#@     upvar 0 ${class}::$path:init pathinit
#@ 
#@     if { [info exists pathopt] } {
#@ 	unset pathopt
#@     }
#@     if { [info exists pathmod] } {
#@ 	unset pathmod
#@     }
#@     # We prefer to use the actual widget for option db queries, but if it
#@     # doesn't exist yet, do the next best thing:  create a widget of the
#@     # same class and use that.
#@     set fpath $path
#@     set rdbclass [string map [list :: ""] $class]
#@     if { ![winfo exists $path] } {
#@ 	set fpath ".#BWidget.#Class#$class"
#@ 	# encapsulation frame to not pollute '.' childspace
#@ 	if {![winfo exists ".#BWidget"]} { frame ".#BWidget" }
#@ 	if { ![winfo exists $fpath] } {
#@ 	    frame $fpath -class $rdbclass
#@ 	}
#@     }
#@     foreach {option optdesc} [array get classopt] {
#@         set pathmod($option) 0
#@ 	if { [info exists classmap($option)] } {
#@ 	    continue
#@ 	}
#@         set type [lindex $optdesc 0]
#@         if { [string equal $type "Synonym"] } {
#@ 	    continue
#@         }
#@         if { [string equal $type "TkResource"] } {
#@             set alt [lindex [lindex $optdesc 3] 1]
#@         } else {
#@             set alt ""
#@         }
#@         set optdb [lindex [_configure_option $option $alt] 0]
#@         set def   [option get $fpath $optdb $rdbclass]
#@         if { [string length $def] } {
#@             set pathopt($option) $def
#@         } else {
#@             set pathopt($option) [lindex $optdesc 1]
#@         }
#@     }
#@ 
#@     if {![info exists _inuse($class)]} { set _inuse($class) 0 }
#@     incr _inuse($class)
#@ 
#@     set _class($path) $class
#@     foreach {option value} $options {
#@         if { ![info exists classopt($option)] } {
#@             unset pathopt
#@             unset pathmod
#@             return -code error "unknown option \"$option\""
#@         }
#@         set optdesc $classopt($option)
#@         set type    [lindex $optdesc 0]
#@         if { [string equal $type "Synonym"] } {
#@             set option  [lindex $optdesc 1]
#@             set optdesc $classopt($option)
#@             set type    [lindex $optdesc 0]
#@         }
#@         # this may fail if a wrong enum element was used
#@         if {[catch {
#@              $_optiontype($type) $option $value [lindex $optdesc 3]
#@         } msg]} {
#@             if {[info exists pathopt]} {
#@                 unset pathopt
#@             }
#@             unset pathmod
#@             return -code error $msg
#@         }
#@         set pathopt($option) $msg
#@ 	set pathinit($option) $pathopt($option)
#@     }
#@ }
#@ 
#@ # Bastien Chevreux (bach@mwgdna.com)
#@ #
#@ # copyinit performs basically the same job as init, but it uses a
#@ #  existing template to initialize its values. So, first a perferct copy
#@ #  from the template is made just to be altered by any existing options
#@ #  afterwards.
#@ # But this still saves time as the first initialization parsing block is
#@ #  skipped.
#@ # As additional bonus, items that differ in just a few options can be
#@ #  initialized faster by leaving out the options that are equal.
#@ 
#@ # This function is currently used only by ListBox::multipleinsert, but other
#@ #  calls should follow :)
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::copyinit
#@ # ----------------------------------------------------------------------------
#@ proc Widget::copyinit { class templatepath path options } {
#@     variable _class
#@     variable _optiontype
#@     upvar 0 ${class}::opt classopt 	    ${class}::$path:opt	 pathopt 	    ${class}::$path:mod	 pathmod 	    ${class}::$path:init pathinit 	    ${class}::$templatepath:opt	  templatepathopt 	    ${class}::$templatepath:mod	  templatepathmod 	    ${class}::$templatepath:init  templatepathinit
#@ 
#@     if { [info exists pathopt] } {
#@ 	unset pathopt
#@     }
#@     if { [info exists pathmod] } {
#@ 	unset pathmod
#@     }
#@ 
#@     # We use the template widget for option db copying, but it has to exist!
#@     array set pathmod  [array get templatepathmod]
#@     array set pathopt  [array get templatepathopt]
#@     array set pathinit [array get templatepathinit]
#@ 
#@     set _class($path) $class
#@     foreach {option value} $options {
#@ 	if { ![info exists classopt($option)] } {
#@ 	    unset pathopt
#@ 	    unset pathmod
#@ 	    return -code error "unknown option \"$option\""
#@ 	}
#@ 	set optdesc $classopt($option)
#@ 	set type    [lindex $optdesc 0]
#@ 	if { [string equal $type "Synonym"] } {
#@ 	    set option	[lindex $optdesc 1]
#@ 	    set optdesc $classopt($option)
#@ 	    set type	[lindex $optdesc 0]
#@ 	}
#@ 	set pathopt($option) [$_optiontype($type) $option $value [lindex $optdesc 3]]
#@ 	set pathinit($option) $pathopt($option)
#@     }
#@ }
#@ 
#@ # Widget::parseArgs --
#@ #
#@ #	Given a widget class and a command-line spec, cannonize and validate
#@ #	the given options, and return a keyed list consisting of the 
#@ #	component widget and its masked portion of the command-line spec, and
#@ #	one extra entry consisting of the portion corresponding to the 
#@ #	megawidget itself.
#@ #
#@ # Arguments:
#@ #	class	widget class to parse for.
#@ #	options	command-line spec
#@ #
#@ # Results:
#@ #	result	keyed list of portions of the megawidget and that segment of
#@ #		the command line in which that portion is interested.
#@ 
#@ proc Widget::parseArgs {class options} {
#@     variable _optiontype
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::map classmap
#@     
#@     foreach {option val} $options {
#@ 	if { ![info exists classopt($option)] } {
#@ 	    error "unknown option \"$option\""
#@ 	}
#@         set optdesc $classopt($option)
#@         set type    [lindex $optdesc 0]
#@         if { [string equal $type "Synonym"] } {
#@             set option  [lindex $optdesc 1]
#@             set optdesc $classopt($option)
#@             set type    [lindex $optdesc 0]
#@         }
#@ 	if { [string equal $type "TkResource"] } {
#@ 	    # Make sure that the widget used for this TkResource exists
#@ 	    Widget::_get_tkwidget_options [lindex [lindex $optdesc 3] 0]
#@ 	}
#@ 	set val [$_optiontype($type) $option $val [lindex $optdesc 3]]
#@ 		
#@ 	if { [info exists classmap($option)] } {
#@ 	    foreach {subpath subclass realopt} $classmap($option) {
#@ 		lappend maps($subpath) $realopt $val
#@ 	    }
#@ 	} else {
#@ 	    lappend maps($class) $option $val
#@ 	}
#@     }
#@     return [array get maps]
#@ }
#@ 
#@ # Widget::initFromODB --
#@ #
#@ #	Initialize a megawidgets options with information from the option
#@ #	database and from the command-line arguments given.
#@ #
#@ # Arguments:
#@ #	class	class of the widget.
#@ #	path	path of the widget -- should already exist.
#@ #	options	command-line arguments.
#@ #
#@ # Results:
#@ #	None.
#@ 
#@ proc Widget::initFromODB {class path options} {
#@     variable _inuse
#@     variable _class
#@ 
#@     upvar 0 ${class}::$path:opt  pathopt
#@     upvar 0 ${class}::$path:mod  pathmod
#@     upvar 0 ${class}::map classmap
#@ 
#@     if { [info exists pathopt] } {
#@ 	unset pathopt
#@     }
#@     if { [info exists pathmod] } {
#@ 	unset pathmod
#@     }
#@     # We prefer to use the actual widget for option db queries, but if it
#@     # doesn't exist yet, do the next best thing:  create a widget of the
#@     # same class and use that.
#@     set fpath [_get_window $class $path]
#@     set rdbclass [string map [list :: ""] $class]
#@     if { ![winfo exists $path] } {
#@ 	set fpath ".#BWidget.#Class#$class"
#@ 	# encapsulation frame to not pollute '.' childspace
#@ 	if {![winfo exists ".#BWidget"]} { frame ".#BWidget" }
#@ 	if { ![winfo exists $fpath] } {
#@ 	    frame $fpath -class $rdbclass
#@ 	}
#@     }
#@ 
#@     foreach {option optdesc} [array get ${class}::opt] {
#@         set pathmod($option) 0
#@ 	if { [info exists classmap($option)] } {
#@ 	    continue
#@ 	}
#@         set type [lindex $optdesc 0]
#@         if { [string equal $type "Synonym"] } {
#@ 	    continue
#@         }
#@ 	if { [string equal $type "TkResource"] } {
#@             set alt [lindex [lindex $optdesc 3] 1]
#@         } else {
#@             set alt ""
#@         }
#@         set optdb [lindex [_configure_option $option $alt] 0]
#@         set def   [option get $fpath $optdb $rdbclass]
#@         if { [string length $def] } {
#@             set pathopt($option) $def
#@         } else {
#@             set pathopt($option) [lindex $optdesc 1]
#@         }
#@     }
#@ 
#@     if {![info exists _inuse($class)]} { set _inuse($class) 0 }
#@     incr _inuse($class)
#@ 
#@     set _class($path) $class
#@     array set pathopt $options
#@ }
#@ 
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::destroy
#@ # ----------------------------------------------------------------------------
#@ proc Widget::destroy { path } {
#@     variable _class
#@     variable _inuse
#@ 
#@     if {![info exists _class($path)]} { return }
#@ 
#@     set class $_class($path)
#@     upvar 0 ${class}::$path:opt pathopt
#@     upvar 0 ${class}::$path:mod pathmod
#@     upvar 0 ${class}::$path:init pathinit
#@ 
#@     if {[info exists _inuse($class)]} { incr _inuse($class) -1 }
#@ 
#@     if {[info exists pathopt]} {
#@         unset pathopt
#@     }
#@     if {[info exists pathmod]} {
#@         unset pathmod
#@     }
#@     if {[info exists pathinit]} {
#@         unset pathinit
#@     }
#@ 
#@     if {![string equal [info commands $path] ""]} { rename $path "" }
#@ 
#@     ## Unset any variables used in this widget.
#@     foreach var [info vars ::${class}::$path:*] { unset $var }
#@ 
#@     unset _class($path)
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::configure
#@ # ----------------------------------------------------------------------------
#@ proc Widget::configure { path options } {
#@     set len [llength $options]
#@     if { $len <= 1 } {
#@         return [_get_configure $path $options]
#@     } elseif { $len % 2 == 1 } {
#@         return -code error "incorrect number of arguments"
#@     }
#@ 
#@     variable _class
#@     variable _optiontype
#@ 
#@     set class $_class($path)
#@     upvar 0 ${class}::opt  classopt
#@     upvar 0 ${class}::map  classmap
#@     upvar 0 ${class}::$path:opt pathopt
#@     upvar 0 ${class}::$path:mod pathmod
#@ 
#@     set window [_get_window $class $path]
#@     foreach {option value} $options {
#@         if { ![info exists classopt($option)] } {
#@             return -code error "unknown option \"$option\""
#@         }
#@         set optdesc $classopt($option)
#@         set type    [lindex $optdesc 0]
#@         if { [string equal $type "Synonym"] } {
#@             set option  [lindex $optdesc 1]
#@             set optdesc $classopt($option)
#@             set type    [lindex $optdesc 0]
#@         }
#@         if { ![lindex $optdesc 2] } {
#@             set newval [$_optiontype($type) $option $value [lindex $optdesc 3]]
#@             if { [info exists classmap($option)] } {
#@ 		set window [_get_window $class $window]
#@                 foreach {subpath subclass realopt} $classmap($option) {
#@                     # Interpretation of special pointers:
#@                     # | subclass | subpath | widget           | path           | class   |
#@                     # +----------+---------+------------------+----------------+-context-+
#@                     # | :cmd     | :cmd    | herited widget   | window:cmd     |window   |
#@                     # | :cmd     | *       | subwidget        | window.subpath | window  |
#@                     # | ""       | :cmd    | herited widget   | window:cmd     | window  |
#@                     # | ""       | *       | own              | window         | window  |
#@                     # | *        | :cmd    | own              | window         | current |
#@                     # | *        | *       | subwidget        | window.subpath | current |
#@                     if { [string length $subclass] && ! [string equal $subclass ":cmd"] } {
#@                         if { [string equal $subpath ":cmd"] } {
#@                             set subpath ""
#@                         }
#@                         set curval [${subclass}::cget $window$subpath $realopt]
#@                         ${subclass}::configure $window$subpath $realopt $newval
#@                     } else {
#@                         set curval [$window$subpath cget $realopt]
#@                         $window$subpath configure $realopt $newval
#@                     }
#@                 }
#@             } else {
#@ 		set curval $pathopt($option)
#@ 		set pathopt($option) $newval
#@ 	    }
#@ 	    set pathmod($option) [expr {![string equal $newval $curval]}]
#@         }
#@     }
#@ 
#@     return {}
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::cget
#@ # ----------------------------------------------------------------------------
#@ proc Widget::cget { path option } {
#@     variable _class
#@     if { ![info exists _class($path)] } {
#@         return -code error "unknown widget $path"
#@     }
#@ 
#@     set class $_class($path)
#@     if { ![info exists ${class}::opt($option)] } {
#@         return -code error "unknown option \"$option\""
#@     }
#@ 
#@     set optdesc [set ${class}::opt($option)]
#@     set type    [lindex $optdesc 0]
#@     if {[string equal $type "Synonym"]} {
#@         set option [lindex $optdesc 1]
#@     }
#@ 
#@     if { [info exists ${class}::map($option)] } {
#@ 	foreach {subpath subclass realopt} [set ${class}::map($option)] {break}
#@ 	set path "[_get_window $class $path]$subpath"
#@ 	return [$path cget $realopt]
#@     }
#@     upvar 0 ${class}::$path:opt pathopt
#@     set pathopt($option)
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::subcget
#@ # ----------------------------------------------------------------------------
#@ proc Widget::subcget { path subwidget } {
#@     variable _class
#@     set class $_class($path)
#@     upvar 0 ${class}::$path:opt pathopt
#@     upvar 0 ${class}::map$subwidget submap
#@     upvar 0 ${class}::$path:init pathinit
#@ 
#@     set result {}
#@     foreach realopt [array names submap] {
#@ 	if { [info exists pathinit($submap($realopt))] } {
#@ 	    lappend result $realopt $pathopt($submap($realopt))
#@ 	}
#@     }
#@     return $result
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::hasChanged
#@ # ----------------------------------------------------------------------------
#@ proc Widget::hasChanged { path option pvalue } {
#@     variable _class
#@     upvar $pvalue value
#@     set class $_class($path)
#@     upvar 0 ${class}::$path:mod pathmod
#@ 
#@     set value   [Widget::cget $path $option]
#@     set result  $pathmod($option)
#@     set pathmod($option) 0
#@ 
#@     return $result
#@ }
#@ 
#@ proc Widget::hasChangedX { path option args } {
#@     variable _class
#@     set class $_class($path)
#@     upvar 0 ${class}::$path:mod pathmod
#@ 
#@     set result  $pathmod($option)
#@     set pathmod($option) 0
#@     foreach option $args {
#@ 	lappend result $pathmod($option)
#@ 	set pathmod($option) 0
#@     }
#@ 
#@     set result
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::setoption
#@ # ----------------------------------------------------------------------------
#@ proc Widget::setoption { path option value } {
#@ #    variable _class
#@ 
#@ #    set class $_class($path)
#@ #    upvar 0 ${class}::$path:opt pathopt
#@ 
#@ #    set pathopt($option) $value
#@     Widget::configure $path [list $option $value]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::getoption
#@ # ----------------------------------------------------------------------------
#@ proc Widget::getoption { path option } {
#@ #    set class $::Widget::_class($path)
#@ #    upvar 0 ${class}::$path:opt pathopt
#@ 
#@ #    return $pathopt($option)
#@     return [Widget::cget $path $option]
#@ }
#@ 
#@ # Widget::getMegawidgetOption --
#@ #
#@ #	Bypass the superfluous checks in cget and just directly peer at the
#@ #	widget's data space.  This is much more fragile than cget, so it 
#@ #	should only be used with great care, in places where speed is critical.
#@ #
#@ # Arguments:
#@ #	path	widget to lookup options for.
#@ #	option	option to retrieve.
#@ #
#@ # Results:
#@ #	value	option value.
#@ 
#@ proc Widget::getMegawidgetOption {path option} {
#@     variable _class
#@     set class $_class($path)
#@     upvar 0 ${class}::${path}:opt pathopt
#@     set pathopt($option)
#@ }
#@ 
#@ # Widget::setMegawidgetOption --
#@ #
#@ #	Bypass the superfluous checks in cget and just directly poke at the
#@ #	widget's data space.  This is much more fragile than configure, so it 
#@ #	should only be used with great care, in places where speed is critical.
#@ #
#@ # Arguments:
#@ #	path	widget to lookup options for.
#@ #	option	option to retrieve.
#@ #	value	option value.
#@ #
#@ # Results:
#@ #	value	option value.
#@ 
#@ proc Widget::setMegawidgetOption {path option value} {
#@     variable _class
#@     set class $_class($path)
#@     upvar 0 ${class}::${path}:opt pathopt
#@     set pathopt($option) $value
#@ }
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_get_window
#@ #  returns the window corresponding to widget path
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_get_window { class path } {
#@     set idx [string last "#" $path]
#@     if { $idx != -1 && [string equal [string range $path [expr {$idx+1}] end] $class] } {
#@         return [string range $path 0 [expr {$idx-1}]]
#@     } else {
#@         return $path
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_get_configure
#@ #  returns the configuration list of options
#@ #  (as tk widget do - [$w configure ?option?])
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_get_configure { path options } {
#@     variable _class
#@ 
#@     set class $_class($path)
#@     upvar 0 ${class}::opt classopt
#@     upvar 0 ${class}::map classmap
#@     upvar 0 ${class}::$path:opt pathopt
#@     upvar 0 ${class}::$path:mod pathmod
#@ 
#@     set len [llength $options]
#@     if { !$len } {
#@         set result {}
#@         foreach option [lsort [array names classopt]] {
#@             set optdesc $classopt($option)
#@             set type    [lindex $optdesc 0]
#@             if { [string equal $type "Synonym"] } {
#@                 set syn     $option
#@                 set option  [lindex $optdesc 1]
#@                 set optdesc $classopt($option)
#@                 set type    [lindex $optdesc 0]
#@             } else {
#@                 set syn ""
#@             }
#@             if { [string equal $type "TkResource"] } {
#@                 set alt [lindex [lindex $optdesc 3] 1]
#@             } else {
#@                 set alt ""
#@             }
#@             set res [_configure_option $option $alt]
#@             if { $syn == "" } {
#@                 lappend result [concat $option $res [list [lindex $optdesc 1]] [list [cget $path $option]]]
#@             } else {
#@                 lappend result [list $syn [lindex $res 0]]
#@             }
#@         }
#@         return $result
#@     } elseif { $len == 1 } {
#@         set option  [lindex $options 0]
#@         if { ![info exists classopt($option)] } {
#@             return -code error "unknown option \"$option\""
#@         }
#@         set optdesc $classopt($option)
#@         set type    [lindex $optdesc 0]
#@         if { [string equal $type "Synonym"] } {
#@             set option  [lindex $optdesc 1]
#@             set optdesc $classopt($option)
#@             set type    [lindex $optdesc 0]
#@         }
#@         if { [string equal $type "TkResource"] } {
#@             set alt [lindex [lindex $optdesc 3] 1]
#@         } else {
#@             set alt ""
#@         }
#@         set res [_configure_option $option $alt]
#@         return [concat $option $res [list [lindex $optdesc 1]] [list [cget $path $option]]]
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_configure_option
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_configure_option { option altopt } {
#@     variable _optiondb
#@     variable _optionclass
#@ 
#@     if { [info exists _optiondb($option)] } {
#@         set optdb $_optiondb($option)
#@     } else {
#@         set optdb [string range $option 1 end]
#@     }
#@     if { [info exists _optionclass($option)] } {
#@         set optclass $_optionclass($option)
#@     } elseif { [string length $altopt] } {
#@         if { [info exists _optionclass($altopt)] } {
#@             set optclass $_optionclass($altopt)
#@         } else {
#@             set optclass [string range $altopt 1 end]
#@         }
#@     } else {
#@         set optclass [string range $option 1 end]
#@     }
#@     return [list $optdb $optclass]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_get_tkwidget_options
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_get_tkwidget_options { tkwidget } {
#@     variable _tk_widget
#@     variable _optiondb
#@     variable _optionclass
#@ 
#@     set widget ".#BWidget.#$tkwidget"
#@     # encapsulation frame to not pollute '.' childspace
#@     if {![winfo exists ".#BWidget"]} { frame ".#BWidget" }
#@     if { ![winfo exists $widget] || ![info exists _tk_widget($tkwidget)] } {
#@ 	set widget [$tkwidget $widget]
#@ 	# JDC: Withdraw toplevels, otherwise visible
#@ 	if {[string equal $tkwidget "toplevel"]} {
#@ 	    wm withdraw $widget
#@ 	}
#@ 	set config [$widget configure]
#@ 	foreach optlist $config {
#@ 	    set opt [lindex $optlist 0]
#@ 	    if { [llength $optlist] == 2 } {
#@ 		set refsyn [lindex $optlist 1]
#@ 		# search for class
#@ 		set idx [lsearch $config [list * $refsyn *]]
#@ 		if { $idx == -1 } {
#@ 		    if { [string index $refsyn 0] == "-" } {
#@ 			# search for option (tk8.1b1 bug)
#@ 			set idx [lsearch $config [list $refsyn * *]]
#@ 		    } else {
#@ 			# last resort
#@ 			set idx [lsearch $config [list -[string tolower $refsyn] * *]]
#@ 		    }
#@ 		    if { $idx == -1 } {
#@ 			# fed up with "can't read classopt()"
#@ 			return -code error "can't find option of synonym $opt"
#@ 		    }
#@ 		}
#@ 		set syn [lindex [lindex $config $idx] 0]
#@ 		# JDC: used 4 (was 3) to get def from optiondb
#@ 		set def [lindex [lindex $config $idx] 4]
#@ 		lappend _tk_widget($tkwidget) [list $opt $syn $def]
#@ 	    } else {
#@ 		# JDC: used 4 (was 3) to get def from optiondb
#@ 		set def [lindex $optlist 4]
#@ 		lappend _tk_widget($tkwidget) [list $opt $def]
#@ 		set _optiondb($opt)    [lindex $optlist 1]
#@ 		set _optionclass($opt) [lindex $optlist 2]
#@ 	    }
#@ 	}
#@     }
#@     return $_tk_widget($tkwidget)
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_test_tkresource
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_test_tkresource { option value arg } {
#@ #    set tkwidget [lindex $arg 0]
#@ #    set realopt  [lindex $arg 1]
#@     foreach {tkwidget realopt} $arg break
#@     set path     ".#BWidget.#$tkwidget"
#@     set old      [$path cget $realopt]
#@     $path configure $realopt $value
#@     set res      [$path cget $realopt]
#@     $path configure $realopt $old
#@ 
#@     return $res
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_test_bwresource
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_test_bwresource { option value arg } {
#@     return -code error "bad option type BwResource in widget"
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_test_synonym
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_test_synonym { option value arg } {
#@     return -code error "bad option type Synonym in widget"
#@ }
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_test_color
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_test_color { option value arg } {
#@     if {[catch {winfo rgb . $value} color]} {
#@         return -code error "bad $option value \"$value\": must be a colorname 		or #RRGGBB triplet"
#@     }
#@ 
#@     return $value
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_test_string
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_test_string { option value arg } {
#@     set value
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::_test_flag
#@ # ----------------------------------------------------------------------------
#@ proc Widget::_test_flag { option value arg } {
#@     set len [string length $value]
#@     set res ""
#@     for {set i 0} {$i < $len} {incr i} {
#@         set c [string index $value $i]
#@         if { [string first $c $arg] == -1 } {
#@             return -code error "bad [string range $option 1 end] value \"$value\": characters must be in \"$arg\""
#@         }
#@         if { [string first $c $res] == -1 } {
#@             append res $c
#@         }
#@     }
#@     return $res
#@ }
#@ 
#@ 
#@ # -----------------------------------------------------------------------------
#@ #  Command Widget::_test_enum
#@ # -----------------------------------------------------------------------------
#@ proc Widget::_test_enum { option value arg } {
#@     if { [lsearch $arg $value] == -1 } {
#@         set last [lindex   $arg end]
#@         set sub  [lreplace $arg end end]
#@         if { [llength $sub] } {
#@             set str "[join $sub ", "] or $last"
#@         } else {
#@             set str $last
#@         }
#@         return -code error "bad [string range $option 1 end] value \"$value\": must be $str"
#@     }
#@     return $value
#@ }
#@ 
#@ 
#@ # -----------------------------------------------------------------------------
#@ #  Command Widget::_test_int
#@ # -----------------------------------------------------------------------------
#@ proc Widget::_test_int { option value arg } {
#@     if { ![string is int -strict $value] || 	    ([string length $arg] && 	    ![expr [string map [list %d $value] $arg]]) } {
#@ 		    return -code error "bad $option value			    \"$value\": must be integer ($arg)"
#@     }
#@     return $value
#@ }
#@ 
#@ 
#@ # -----------------------------------------------------------------------------
#@ #  Command Widget::_test_boolean
#@ # -----------------------------------------------------------------------------
#@ proc Widget::_test_boolean { option value arg } {
#@     if { ![string is boolean -strict $value] } {
#@         return -code error "bad $option value \"$value\": must be boolean"
#@     }
#@ 
#@     # Get the canonical form of the boolean value (1 for true, 0 for false)
#@     return [string is true $value]
#@ }
#@ 
#@ 
#@ # -----------------------------------------------------------------------------
#@ #  Command Widget::_test_padding
#@ # -----------------------------------------------------------------------------
#@ proc Widget::_test_padding { option values arg } {
#@     set len [llength $values]
#@     if {$len < 1 || $len > 2} {
#@         return -code error "bad pad value \"$values\":                        must be positive screen distance"
#@     }
#@ 
#@     foreach value $values {
#@         if { ![string is int -strict $value] ||             ([string length $arg] &&             ![expr [string map [list %d $value] $arg]]) } {
#@                 return -code error "bad pad value \"$value\":                                must be positive screen distance ($arg)"
#@         }
#@     }
#@     return $values
#@ }
#@ 
#@ 
#@ # Widget::_get_padding --
#@ #
#@ #       Return the requesting padding value for a padding option.
#@ #
#@ # Arguments:
#@ #	path		Widget to get the options for.
#@ #       option          The name of the padding option.
#@ #	index		The index of the padding.  If the index is empty,
#@ #                       the first padding value is returned.
#@ #
#@ # Results:
#@ #	Return a numeric value that can be used for padding.
#@ proc Widget::_get_padding { path option {index 0} } {
#@     set pad [Widget::cget $path $option]
#@     set val [lindex $pad $index]
#@     if {$val == ""} { set val [lindex $pad 0] }
#@     return $val
#@ }
#@ 
#@ 
#@ # -----------------------------------------------------------------------------
#@ #  Command Widget::focusNext
#@ #  Same as tk_focusNext, but call Widget::focusOK
#@ # -----------------------------------------------------------------------------
#@ proc Widget::focusNext { w } {
#@     set cur $w
#@     while 1 {
#@ 
#@ 	# Descend to just before the first child of the current widget.
#@ 
#@ 	set parent $cur
#@ 	set children [winfo children $cur]
#@ 	set i -1
#@ 
#@ 	# Look for the next sibling that isn't a top-level.
#@ 
#@ 	while 1 {
#@ 	    incr i
#@ 	    if {$i < [llength $children]} {
#@ 		set cur [lindex $children $i]
#@ 		if {[string equal [winfo toplevel $cur] $cur]} {
#@ 		    continue
#@ 		} else {
#@ 		    break
#@ 		}
#@ 	    }
#@ 
#@ 	    # No more siblings, so go to the current widget's parent.
#@ 	    # If it's a top-level, break out of the loop, otherwise
#@ 	    # look for its next sibling.
#@ 
#@ 	    set cur $parent
#@ 	    if {[string equal [winfo toplevel $cur] $cur]} {
#@ 		break
#@ 	    }
#@ 	    set parent [winfo parent $parent]
#@ 	    set children [winfo children $parent]
#@ 	    set i [lsearch -exact $children $cur]
#@ 	}
#@ 	if {[string equal $cur $w] || [focusOK $cur]} {
#@ 	    return $cur
#@ 	}
#@     }
#@ }
#@ 
#@ 
#@ # -----------------------------------------------------------------------------
#@ #  Command Widget::focusPrev
#@ #  Same as tk_focusPrev, except:
#@ #	+ Don't traverse from a child to a direct ancestor
#@ #	+ Call Widget::focusOK instead of tk::focusOK
#@ # -----------------------------------------------------------------------------
#@ proc Widget::focusPrev { w } {
#@     set cur $w
#@     set origParent [winfo parent $w]
#@     while 1 {
#@ 
#@ 	# Collect information about the current window's position
#@ 	# among its siblings.  Also, if the window is a top-level,
#@ 	# then reposition to just after the last child of the window.
#@ 
#@ 	if {[string equal [winfo toplevel $cur] $cur]}  {
#@ 	    set parent $cur
#@ 	    set children [winfo children $cur]
#@ 	    set i [llength $children]
#@ 	} else {
#@ 	    set parent [winfo parent $cur]
#@ 	    set children [winfo children $parent]
#@ 	    set i [lsearch -exact $children $cur]
#@ 	}
#@ 
#@ 	# Go to the previous sibling, then descend to its last descendant
#@ 	# (highest in stacking order.  While doing this, ignore top-levels
#@ 	# and their descendants.  When we run out of descendants, go up
#@ 	# one level to the parent.
#@ 
#@ 	while {$i > 0} {
#@ 	    incr i -1
#@ 	    set cur [lindex $children $i]
#@ 	    if {[string equal [winfo toplevel $cur] $cur]} {
#@ 		continue
#@ 	    }
#@ 	    set parent $cur
#@ 	    set children [winfo children $parent]
#@ 	    set i [llength $children]
#@ 	}
#@ 	set cur $parent
#@ 	if {[string equal $cur $w]} {
#@ 	    return $cur
#@ 	}
#@ 	# If we are just at the original parent of $w, skip it as a
#@ 	# potential focus accepter.  Extra safety in this is to see if
#@ 	# that parent is also a proc (not a C command), which is what
#@ 	# BWidgets makes for any megawidget.  Could possibly also check
#@ 	# for '[info commands ::${origParent}:cmd] != ""'.  [Bug 765667]
#@ 	if {[string equal $cur $origParent]
#@ 	    && [info procs ::$origParent] != ""} {
#@ 	    continue
#@ 	}
#@ 	if {[focusOK $cur]} {
#@ 	    return $cur
#@ 	}
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command Widget::focusOK
#@ #  Same as tk_focusOK, but handles -editable option and whole tags list.
#@ # ----------------------------------------------------------------------------
#@ proc Widget::focusOK { w } {
#@     set code [catch {$w cget -takefocus} value]
#@     if { $code == 1 } {
#@         return 0
#@     }
#@     if {($code == 0) && ($value != "")} {
#@ 	if {$value == 0} {
#@ 	    return 0
#@ 	} elseif {$value == 1} {
#@ 	    return [winfo viewable $w]
#@ 	} else {
#@ 	    set value [uplevel \#0 $value $w]
#@             if {$value != ""} {
#@ 		return $value
#@ 	    }
#@         }
#@     }
#@     if {![winfo viewable $w]} {
#@ 	return 0
#@     }
#@     set code [catch {$w cget -state} value]
#@     if {($code == 0) && ($value == "disabled")} {
#@ 	return 0
#@     }
#@     set code [catch {$w cget -editable} value]
#@     if {($code == 0) && ($value == 0)} {
#@         return 0
#@     }
#@ 
#@     set top [winfo toplevel $w]
#@     foreach tags [bindtags $w] {
#@         if { ![string equal $tags $top]  &&
#@              ![string equal $tags "all"] &&
#@              [regexp Key [bind $tags]] } {
#@             return 1
#@         }
#@     }
#@     return 0
#@ }
#@ 
#@ 
#@ proc Widget::traverseTo { w } {
#@     set focus [focus]
#@     if {![string equal $focus ""]} {
#@ 	event generate $focus <<TraverseOut>>
#@     }
#@     focus $w
#@ 
#@     event generate $w <<TraverseIn>>
#@ }
#@ 
#@ 
#@ # Widget::varForOption --
#@ #
#@ #	Retrieve a fully qualified variable name for the option specified.
#@ #	If the option is not one for which a variable exists, throw an error 
#@ #	(ie, those options that map directly to widget options).
#@ #
#@ # Arguments:
#@ #	path	megawidget to get an option var for.
#@ #	option	option to get a var for.
#@ #
#@ # Results:
#@ #	varname	name of the variable, fully qualified, suitable for tracing.
#@ 
#@ proc Widget::varForOption {path option} {
#@     variable _class
#@     variable _optiontype
#@ 
#@     set class $_class($path)
#@     upvar 0 ${class}::$path:opt pathopt
#@ 
#@     if { ![info exists pathopt($option)] } {
#@ 	error "unable to find variable for option \"$option\""
#@     }
#@     set varname "::Widget::${class}::$path:opt($option)"
#@     return $varname
#@ }
#@ 
#@ # Widget::getVariable --
#@ #
#@ #       Get a variable from within the namespace of the widget.
#@ #
#@ # Arguments:
#@ #	path		Megawidget to get the variable for.
#@ #	varName		The variable name to retrieve.
#@ #       newVarName	The variable name to refer to in the calling proc.
#@ #
#@ # Results:
#@ #	Creates a reference to newVarName in the calling proc.
#@ proc Widget::getVariable { path varName {newVarName ""} } {
#@     variable _class
#@     set class $_class($path)
#@     if {![string length $newVarName]} { set newVarName $varName }
#@     uplevel 1 [list upvar \#0 ${class}::$path:$varName $newVarName]
#@ }
#@ 
#@ # Widget::options --
#@ #
#@ #       Return a key-value list of options for a widget.  This can
#@ #       be used to serialize the options of a widget and pass them
#@ #       on to a new widget with the same options.
#@ #
#@ # Arguments:
#@ #	path		Widget to get the options for.
#@ #	args		A list of options.  If empty, all options are returned.
#@ #
#@ # Results:
#@ #	Returns list of options as: -option value -option value ...
#@ proc Widget::options { path args } {
#@     if {[llength $args]} {
#@         foreach option $args {
#@             lappend options [_get_configure $path $option]
#@         }
#@     } else {
#@         set options [_get_configure $path {}]
#@     }
#@ 
#@     set result [list]
#@     foreach list $options {
#@         if {[llength $list] < 5} { continue }
#@         lappend result [lindex $list 0] [lindex $list end]
#@     }
#@     return $result
#@ }
#@ 
#@ 
#@ # Widget::getOption --
#@ #
#@ #	Given a list of widgets, determine which option value to use.
#@ #	The widgets are given to the command in order of highest to
#@ #	lowest.  Starting with the lowest widget, whichever one does
#@ #	not match the default option value is returned as the value.
#@ #	If all the widgets are default, we return the highest widget's
#@ #	value.
#@ #
#@ # Arguments:
#@ #	option		The option to check.
#@ #	default		The default value.  If any widget in the list
#@ #			does not match this default, its value is used.
#@ #	args		A list of widgets.
#@ #
#@ # Results:
#@ #	Returns the value of the given option to use.
#@ #
#@ proc Widget::getOption { option default args } {
#@     for {set i [expr [llength $args] -1]} {$i >= 0} {incr i -1} {
#@ 	set widget [lindex $args $i]
#@ 	set value  [Widget::cget $widget $option]
#@ 	if {[string equal $value $default]} { continue }
#@ 	return $value
#@     }
#@     return $value
#@ }
#@ 
#@ 
#@ proc Widget::nextIndex { path node } {
#@     Widget::getVariable $path autoIndex
#@     if {![info exists autoIndex]} { set autoIndex -1 }
#@     return [string map [list #auto [incr autoIndex]] $node]
#@ }
#@ 
#@ 
#@ proc Widget::exists { path } {
#@     variable _class
#@     return [info exists _class($path)]
#@ }
#@ 
#@ proc Widget::theme {{bool {}}} {
#@     # Private, *experimental* API that may change at any time - JH
#@     variable _theme
#@     if {[llength [info level 0]] == 2} {
#@ 	# set theme-ability
#@ 	if {[catch {package require Tk 8.5a6}]
#@ 	    && [catch {package require tile 0.6}]
#@ 	    && [catch {package require tile 1}]} {
#@ 	    return -code error "BWidget's theming requires tile 0.6+"
#@ 	} else {
#@ 	    catch {style default BWSlim.Toolbutton -padding 0}
#@ 	}
#@ 	set _theme [string is true -strict $bool]
#@     }
#@     return $_theme
#@ }
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/widget.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/init.tcl

#@ namespace eval Widget {}
#@ proc Widget::_opt_defaults {{prio widgetDefault}} {
#@     if {$::tcl_version >= 8.4} {
#@ 	set plat [tk windowingsystem]
#@     } else {
#@ 	set plat $::tcl_platform(platform)
#@     }
#@     switch -exact $plat {
#@ 	"aqua" {
#@ 	}
#@ 	"win32" -
#@ 	"windows" {
#@ 	    #option add *Listbox.background	SystemWindow $prio
#@ 	    option add *ListBox.background	SystemWindow $prio
#@ 	    #option add *Button.padY		0 $prio
#@ 	    option add *ButtonBox.padY		0 $prio
#@ 	    option add *Dialog.padY		0 $prio
#@ 	    option add *Dialog.anchor		e $prio
#@ 	}
#@ 	"x11" -
#@ 	default {
#@ 	    option add *Scrollbar.width		12 $prio
#@ 	    option add *Scrollbar.borderWidth	1  $prio
#@ 	    option add *Dialog.separator	1  $prio
#@ 	    option add *MainFrame.relief	raised $prio
#@ 	    option add *MainFrame.separator	none   $prio
#@ 	}
#@     }
#@ }
#@ Widget::_opt_defaults
#@ 
#@ option read [file join $::BWIDGET::LIBRARY "lang" "en.rc"]
#@ 
#@ ## Add a TraverseIn binding to standard Tk widgets to handle some of
#@ ## the BWidget-specific things we do.
#@ bind Entry   <<TraverseIn>> { %W selection range 0 end; %W icursor end }
#@ bind Spinbox <<TraverseIn>> { %W selection range 0 end; %W icursor end }
#@ 
#@ bind all <Key-Tab>       { Widget::traverseTo [Widget::focusNext %W] }
#@ bind all <<PrevWindow>>  { Widget::traverseTo [Widget::focusPrev %W] }
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/init.tcl

#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/utils.tcl

#@ # ----------------------------------------------------------------------------
#@ #  utils.tcl
#@ #  This file is part of Unifix BWidget Toolkit
#@ #  $Id: utils.tcl,v 1.15.2.1 2009/09/03 17:29:03 oehhar Exp $
#@ # ----------------------------------------------------------------------------
#@ #  Index of commands:
#@ #     - GlobalVar::exists
#@ #     - GlobalVar::setvarvar
#@ #     - GlobalVar::getvarvar
#@ #     - BWidget::assert
#@ #     - BWidget::clonename
#@ #     - BWidget::get3dcolor
#@ #     - BWidget::XLFDfont
#@ #     - BWidget::place
#@ #     - BWidget::grab
#@ #     - BWidget::focus
#@ # ----------------------------------------------------------------------------
#@ 
#@ namespace eval GlobalVar {
#@     proc use {} {}
#@ }
#@ 
#@ 
#@ namespace eval BWidget {
#@     variable _top
#@     variable _gstack {}
#@     variable _fstack {}
#@     proc use {} {}
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command GlobalVar::exists
#@ # ----------------------------------------------------------------------------
#@ proc GlobalVar::exists { varName } {
#@     return [uplevel \#0 [list info exists $varName]]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command GlobalVar::setvar
#@ # ----------------------------------------------------------------------------
#@ proc GlobalVar::setvar { varName value } {
#@     return [uplevel \#0 [list set $varName $value]]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command GlobalVar::getvar
#@ # ----------------------------------------------------------------------------
#@ proc GlobalVar::getvar { varName } {
#@     return [uplevel \#0 [list set $varName]]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command GlobalVar::tracevar
#@ # ----------------------------------------------------------------------------
#@ proc GlobalVar::tracevar { cmd varName args } {
#@     return [uplevel \#0 [list trace $cmd $varName] $args]
#@ }
#@ 
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::lreorder
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::lreorder { list neworder } {
#@     set pos     0
#@     set newlist {}
#@     foreach e $neworder {
#@         if { [lsearch -exact $list $e] != -1 } {
#@             lappend newlist $e
#@             set tabelt($e)  1
#@         }
#@     }
#@     set len [llength $newlist]
#@     if { !$len } {
#@         return $list
#@     }
#@     if { $len == [llength $list] } {
#@         return $newlist
#@     }
#@     set pos 0
#@     foreach e $list {
#@         if { ![info exists tabelt($e)] } {
#@             set newlist [linsert $newlist $pos $e]
#@         }
#@         incr pos
#@     }
#@     return $newlist
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::assert
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::assert { exp {msg ""}} {
#@     set res [uplevel 1 expr $exp]
#@     if { !$res} {
#@         if { $msg == "" } {
#@             return -code error "Assertion failed: {$exp}"
#@         } else {
#@             return -code error $msg
#@         }
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::clonename
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::clonename { menu } {
#@     set path     ""
#@     set menupath ""
#@     set found    0
#@     foreach widget [lrange [split $menu "."] 1 end] {
#@         if { $found || [winfo class "$path.$widget"] == "Menu" } {
#@             set found 1
#@             append menupath "#" $widget
#@             append path "." $menupath
#@         } else {
#@             append menupath "#" $widget
#@             append path "." $widget
#@         }
#@     }
#@     return $path
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::getname
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::getname { name } {
#@     if { [string length $name] } {
#@         set text [option get . "${name}Name" ""]
#@         if { [string length $text] } {
#@             return [parsetext $text]
#@         }
#@     }
#@     return {}
#@  }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::parsetext
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::parsetext { text } {
#@     set result ""
#@     set index  -1
#@     set start  0
#@     while { [string length $text] } {
#@         set idx [string first "&" $text]
#@         if { $idx == -1 } {
#@             append result $text
#@             set text ""
#@         } else {
#@             set char [string index $text [expr {$idx+1}]]
#@             if { $char == "&" } {
#@                 append result [string range $text 0 $idx]
#@                 set    text   [string range $text [expr {$idx+2}] end]
#@                 set    start  [expr {$start+$idx+1}]
#@             } else {
#@                 append result [string range $text 0 [expr {$idx-1}]]
#@                 set    text   [string range $text [expr {$idx+1}] end]
#@                 incr   start  $idx
#@                 set    index  $start
#@             }
#@         }
#@     }
#@     return [list $result $index]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::get3dcolor
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::get3dcolor { path bgcolor } {
#@     foreach val [winfo rgb $path $bgcolor] {
#@         lappend dark [expr {60*$val/100}]
#@         set tmp1 [expr {14*$val/10}]
#@         if { $tmp1 > 65535 } {
#@             set tmp1 65535
#@         }
#@         set tmp2 [expr {(65535+$val)/2}]
#@         lappend light [expr {($tmp1 > $tmp2) ? $tmp1:$tmp2}]
#@     }
#@     return [list [eval format "#%04x%04x%04x" $dark] [eval format "#%04x%04x%04x" $light]]
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::XLFDfont
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::XLFDfont { cmd args } {
#@     switch -- $cmd {
#@         create {
#@             set font "-*-*-*-*-*-*-*-*-*-*-*-*-*-*"
#@         }
#@         configure {
#@             set font [lindex $args 0]
#@             set args [lrange $args 1 end]
#@         }
#@         default {
#@             return -code error "XLFDfont: commande incorrect: $cmd"
#@         }
#@     }
#@     set lfont [split $font "-"]
#@     if { [llength $lfont] != 15 } {
#@         return -code error "XLFDfont: description XLFD incorrect: $font"
#@     }
#@ 
#@     foreach {option value} $args {
#@         switch -- $option {
#@             -foundry { set index 1 }
#@             -family  { set index 2 }
#@             -weight  { set index 3 }
#@             -slant   { set index 4 }
#@             -size    { set index 7 }
#@             default  { return -code error "XLFDfont: option incorrecte: $option" }
#@         }
#@         set lfont [lreplace $lfont $index $index $value]
#@     }
#@     return [join $lfont "-"]
#@ }
#@ 
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::place
#@ # ----------------------------------------------------------------------------
#@ #
#@ # Notes:
#@ #  For Windows systems with more than one monitor the available screen area may
#@ #  have negative positions. Geometry settings with negative numbers are used
#@ #  under X to place wrt the right or bottom of the screen. On windows, Tk
#@ #  continues to do this. However, a geometry such as 100x100+-200-100 can be
#@ #  used to place a window onto a secondary monitor. Passing the + gets Tk
#@ #  to pass the remainder unchanged so the Windows manager then handles -200
#@ #  which is a position on the left hand monitor.
#@ #  I've tested this for left, right, above and below the primary monitor.
#@ #  Currently there is no way to ask Tk the extent of the Windows desktop in 
#@ #  a multi monitor system. Nor what the legal co-ordinate range might be.
#@ #
#@ proc BWidget::place { path w h args } {
#@     variable _top
#@ 
#@     update idletasks
#@ 
#@     # If the window is not mapped, it may have any current size.
#@     # Then use required size, but bound it to the screen width.
#@     # This is mostly inexact, because any toolbars will still be removed
#@     # which may reduce size.
#@     if { $w == 0 && [winfo ismapped $path] } {
#@         set w [winfo width $path]
#@     } else {
#@         if { $w == 0 } {
#@             set w [winfo reqwidth $path]
#@         }
#@         set vsw [winfo vrootwidth  $path]
#@         if { $w > $vsw } { set w $vsw }
#@     }
#@ 
#@     if { $h == 0 && [winfo ismapped $path] } {
#@         set h [winfo height $path]
#@     } else {
#@         if { $h == 0 } {
#@             set h [winfo reqheight $path]
#@         }
#@         set vsh [winfo vrootheight $path]
#@         if { $h > $vsh } { set h $vsh }
#@     }
#@ 
#@     set arglen [llength $args]
#@     if { $arglen > 3 } {
#@         return -code error "BWidget::place: bad number of argument"
#@     }
#@ 
#@     if { $arglen > 0 } {
#@         set where [lindex $args 0]
#@ 	set list  [list "at" "center" "left" "right" "above" "below"]
#@         set idx   [lsearch $list $where]
#@         if { $idx == -1 } {
#@ 	    return -code error [BWidget::badOptionString position $where $list]
#@         }
#@         if { $idx == 0 } {
#@             set err [catch {
#@                 # purposely removed the {} around these expressions - [PT]
#@                 set x [expr int([lindex $args 1])]
#@                 set y [expr int([lindex $args 2])]
#@             }]
#@             if { $err } {
#@                 return -code error "BWidget::place: incorrect position"
#@             }
#@             if {$::tcl_platform(platform) == "windows"} {
#@                 # handle windows multi-screen. -100 != +-100
#@                 if {[string index [lindex $args 1] 0] != "-"} {
#@                     set x "+$x"
#@                 }
#@                 if {[string index [lindex $args 2] 0] != "-"} {
#@                     set y "+$y"
#@                 }
#@             } else {
#@                 if { $x >= 0 } {
#@                     set x "+$x"
#@                 }
#@                 if { $y >= 0 } {
#@                     set y "+$y"
#@                 }
#@             }
#@         } else {
#@             if { $arglen == 2 } {
#@                 set widget [lindex $args 1]
#@                 if { ![winfo exists $widget] } {
#@                     return -code error "BWidget::place: \"$widget\" does not exist"
#@                 }
#@ 	    } else {
#@ 		set widget .
#@ 	    }
#@             set sw [winfo screenwidth  $path]
#@             set sh [winfo screenheight $path]
#@             if { $idx == 1 } {
#@                 if { $arglen == 2 } {
#@                     # center to widget
#@                     set x0 [expr {[winfo rootx $widget] + ([winfo width  $widget] - $w)/2}]
#@                     set y0 [expr {[winfo rooty $widget] + ([winfo height $widget] - $h)/2}]
#@                 } else {
#@                     # center to screen
#@                     set x0 [expr {($sw - $w)/2 - [winfo vrootx $path]}]
#@                     set y0 [expr {($sh - $h)/2 - [winfo vrooty $path]}]
#@                 }
#@                 set x "+$x0"
#@                 set y "+$y0"
#@                 if {$::tcl_platform(platform) != "windows"} {
#@                     if { $x0+$w > $sw } {set x "-0"; set x0 [expr {$sw-$w}]}
#@                     if { $x0 < 0 }      {set x "+0"}
#@                     if { $y0+$h > $sh } {set y "-0"; set y0 [expr {$sh-$h}]}
#@                     if { $y0 < 0 }      {set y "+0"}
#@                 }
#@             } else {
#@                 set x0 [winfo rootx $widget]
#@                 set y0 [winfo rooty $widget]
#@                 set x1 [expr {$x0 + [winfo width  $widget]}]
#@                 set y1 [expr {$y0 + [winfo height $widget]}]
#@                 if { $idx == 2 || $idx == 3 } {
#@                     set y "+$y0"
#@                     if {$::tcl_platform(platform) != "windows"} {
#@                         if { $y0+$h > $sh } {set y "-0"; set y0 [expr {$sh-$h}]}
#@                         if { $y0 < 0 }      {set y "+0"}
#@                     }
#@                     if { $idx == 2 } {
#@                         # try left, then right if out, then 0 if out
#@                         if { $x0 >= $w } {
#@                             set x [expr {$x0-$w}]
#@                         } elseif { $x1+$w <= $sw } {
#@                             set x "+$x1"
#@                         } else {
#@                             set x "+0"
#@                         }
#@                     } else {
#@                         # try right, then left if out, then 0 if out
#@                         if { $x1+$w <= $sw } {
#@                             set x "+$x1"
#@                         } elseif { $x0 >= $w } {
#@                             set x [expr {$x0-$w}]
#@                         } else {
#@                             set x "-0"
#@                         }
#@                     }
#@                 } else {
#@                     set x "+$x0"
#@                     if {$::tcl_platform(platform) != "windows"} {
#@                         if { $x0+$w > $sw } {set x "-0"; set x0 [expr {$sw-$w}]}
#@                         if { $x0 < 0 }      {set x "+0"}
#@                     }
#@                     if { $idx == 4 } {
#@                         # try top, then bottom, then 0
#@                         if { $h <= $y0 } {
#@                             set y [expr {$y0-$h}]
#@                         } elseif { $y1+$h <= $sh } {
#@                             set y "+$y1"
#@                         } else {
#@                             set y "+0"
#@                         }
#@                     } else {
#@                         # try bottom, then top, then 0
#@                         if { $y1+$h <= $sh } {
#@                             set y "+$y1"
#@                         } elseif { $h <= $y0 } {
#@                             set y [expr {$y0-$h}]
#@                         } else {
#@                             set y "-0"
#@                         }
#@                     }
#@                 }
#@             }
#@         }
#@ 
#@         ## If there's not a + or - in front of the number, we need to add one.
#@         if {[string is integer [string index $x 0]]} { set x +$x }
#@         if {[string is integer [string index $y 0]]} { set y +$y }
#@ 
#@         wm geometry $path "${w}x${h}${x}${y}"
#@     } else {
#@         wm geometry $path "${w}x${h}"
#@     }
#@     update idletasks
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::grab
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::grab { option path } {
#@     variable _gstack
#@ 
#@     if { $option == "release" } {
#@         catch {::grab release $path}
#@         while { [llength $_gstack] } {
#@             set grinfo  [lindex $_gstack end]
#@             set _gstack [lreplace $_gstack end end]
#@             foreach {oldg mode} $grinfo {
#@                 if { ![string equal $oldg $path] && [winfo exists $oldg] } {
#@                     if { $mode == "global" } {
#@                         catch {::grab -global $oldg}
#@                     } else {
#@                         catch {::grab $oldg}
#@                     }
#@                     return
#@                 }
#@             }
#@         }
#@     } else {
#@         set oldg [::grab current]
#@         if { $oldg != "" } {
#@             lappend _gstack [list $oldg [::grab status $oldg]]
#@         }
#@         if { $option == "global" } {
#@             ::grab -global $path
#@         } else {
#@             ::grab $path
#@         }
#@     }
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------------
#@ #  Command BWidget::focus
#@ # ----------------------------------------------------------------------------
#@ proc BWidget::focus { option path {refocus 1} } {
#@     variable _fstack
#@ 
#@     if { $option == "release" } {
#@         while { [llength $_fstack] } {
#@             set oldf [lindex $_fstack end]
#@             set _fstack [lreplace $_fstack end end]
#@             if { ![string equal $oldf $path] && [winfo exists $oldf] } {
#@                 if {$refocus} {catch {::focus -force $oldf}}
#@                 return
#@             }
#@         }
#@     } elseif { $option == "set" } {
#@         lappend _fstack [::focus]
#@         ::focus -force $path
#@     }
#@ }
#@ 
#@ # BWidget::refocus --
#@ #
#@ #	Helper function used to redirect focus from a container frame in 
#@ #	a megawidget to a component widget.  Only redirects focus if
#@ #	focus is already on the container.
#@ #
#@ # Arguments:
#@ #	container	container widget to redirect from.
#@ #	component	component widget to redirect to.
#@ #
#@ # Results:
#@ #	None.
#@ 
#@ proc BWidget::refocus {container component} {
#@     if { [string equal $container [::focus]] } {
#@ 	::focus $component
#@     }
#@     return
#@ }
#@ 
#@ ## These mirror tk::(Set|Restore)FocusGrab
#@ 
#@ # BWidget::SetFocusGrab --
#@ #   swap out current focus and grab temporarily (for dialogs)
#@ # Arguments:
#@ #   grab	new window to grab
#@ #   focus	window to give focus to
#@ # Results:
#@ #   Returns nothing
#@ #
#@ proc BWidget::SetFocusGrab {grab {focus {}}} {
#@     variable _focusGrab
#@     set index "$grab,$focus"
#@ 
#@     lappend _focusGrab($index) [::focus]
#@     set oldGrab [::grab current $grab]
#@     lappend _focusGrab($index) $oldGrab
#@     if {[winfo exists $oldGrab]} {
#@ 	lappend _focusGrab($index) [::grab status $oldGrab]
#@     }
#@     # The "grab" command will fail if another application
#@     # already holds the grab.  So catch it.
#@     catch {::grab $grab}
#@     if {[winfo exists $focus]} {
#@ 	::focus $focus
#@     }
#@ }
#@ 
#@ # BWidget::RestoreFocusGrab --
#@ #   restore old focus and grab (for dialogs)
#@ # Arguments:
#@ #   grab	window that had taken grab
#@ #   focus	window that had taken focus
#@ #   destroy	destroy|withdraw - how to handle the old grabbed window
#@ # Results:
#@ #   Returns nothing
#@ #
#@ proc BWidget::RestoreFocusGrab {grab focus {destroy destroy}} {
#@     variable _focusGrab
#@     set index "$grab,$focus"
#@     if {[info exists _focusGrab($index)]} {
#@ 	foreach {oldFocus oldGrab oldStatus} $_focusGrab($index) break
#@ 	unset _focusGrab($index)
#@     } else {
#@ 	set oldGrab ""
#@     }
#@ 
#@     catch {::focus $oldFocus}
#@     ::grab release $grab
#@     if {[string equal $destroy "withdraw"]} {
#@ 	wm withdraw $grab
#@     } else {
#@ 	::destroy $grab
#@     }
#@     if {[winfo exists $oldGrab] && [winfo ismapped $oldGrab]} {
#@ 	if {[string equal $oldStatus "global"]} {
#@ 	    ::grab -global $oldGrab
#@ 	} else {
#@ 	    ::grab $oldGrab
#@ 	}
#@     }
#@ }
#@ 
#@ # BWidget::badOptionString --
#@ #
#@ #	Helper function to return a proper error string when an option
#@ #       doesn't match a list of given options.
#@ #
#@ # Arguments:
#@ #	type	A string that represents the type of option.
#@ #	value	The value that is in-valid.
#@ #       list	A list of valid options.
#@ #
#@ # Results:
#@ #	None.
#@ proc BWidget::badOptionString {type value list} {
#@     set last [lindex $list end]
#@     set list [lreplace $list end end]
#@     return "bad $type \"$value\": must be [join $list ", "], or $last"
#@ }
#@ 
#@ 
#@ proc BWidget::wrongNumArgsString { string } {
#@     return "wrong # args: should be \"$string\""
#@ }
#@ 
#@ 
#@ proc BWidget::read_file { file } {
#@     set fp [open $file]
#@     set x  [read $fp [file size $file]]
#@     close $fp
#@     return $x
#@ }
#@ 
#@ 
#@ proc BWidget::classes { class } {
#@     variable use
#@ 
#@     ${class}::use
#@     set classes [list $class]
#@     if {![info exists use($class)]} { return }
#@     foreach class $use($class) {
#@         if {![string equal $class "-classonly"]} {
#@             eval lappend classes [classes $class]
#@         }
#@     }
#@     return [lsort -unique $classes]
#@ }
#@ 
#@ 
#@ proc BWidget::library { args } {
#@     variable use
#@ 
#@     set libs    [list widget init utils]
#@     set classes [list]
#@     foreach class $args {
#@ 	${class}::use
#@         eval lappend classes [classes $class]
#@     }
#@ 
#@     eval lappend libs [lsort -unique $classes]
#@ 
#@     set library ""
#@     foreach lib $libs {
#@ 	if {![info exists use($lib,file)]} {
#@ 	    set file [file join $::BWIDGET::LIBRARY $lib.tcl]
#@ 	} else {
#@ 	    set file [file join $::BWIDGET::LIBRARY $use($lib,file).tcl]
#@ 	}
#@         append library [read_file $file]
#@     }
#@ 
#@     return $library
#@ }
#@ 
#@ 
#@ proc BWidget::inuse { class } {
#@     variable ::Widget::_inuse
#@ 
#@     if {![info exists _inuse($class)]} { return 0 }
#@     return [expr $_inuse($class) > 0]
#@ }
#@ 
#@ 
#@ proc BWidget::write { filename {mode w} } {
#@     variable use
#@ 
#@     if {![info exists use(classes)]} { return }
#@ 
#@     set classes [list]
#@     foreach class $use(classes) {
#@ 	if {![inuse $class]} { continue }
#@ 	lappend classes $class
#@     }
#@ 
#@     set fp [open $filename $mode]
#@     puts $fp [eval library $classes]
#@     close $fp
#@ 
#@     return
#@ }
#@ 
#@ 
#@ # BWidget::bindMouseWheel --
#@ #
#@ #	Bind mouse wheel actions to a given widget.
#@ #
#@ # Arguments:
#@ #	widget - The widget to bind.
#@ #
#@ # Results:
#@ #	None.
#@ proc BWidget::bindMouseWheel { widget } {
#@     if {[bind all <MouseWheel>] eq ""} {
#@ 	# style::as and Tk 8.5 have global bindings
#@ 	# Only enable these if no global binding for MouseWheel exists
#@ 	bind $widget <MouseWheel> 	    {%W yview scroll [expr {-%D/24}]  units}
#@ 	bind $widget <Shift-MouseWheel> 	    {%W yview scroll [expr {-%D/120}] pages}
#@ 	bind $widget <Control-MouseWheel> 	    {%W yview scroll [expr {-%D/120}] units}
#@     }
#@ 
#@     if {[bind all <Button-4>] eq ""} {
#@ 	# style::as and Tk 8.5 have global bindings
#@ 	# Only enable these if no global binding for them exists
#@ 	bind $widget <Button-4> {event generate %W <MouseWheel> -delta  120}
#@ 	bind $widget <Button-5> {event generate %W <MouseWheel> -delta -120}
#@     }
#@ }
#@ 
#@ 
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/fp/bw/utils.tcl

win_set_filter -visible -class cell -filter {hard_macro_margin hard_margin route_blockage_margin soft_margin}
win_set_filter -visible -class polygon -layer {71 72 73 74 75 76 77 78 79 80 87 97}
win_set_filter -visible -class placement_blockage -filter {wiring} -layer {}
win_set_filter -expand_cell_types {std io hard_macro soft_macro ilm other  }
win_set_select_class -visible {cell port plan_group block_shielding plangroup_padding core_area die_area polygon group shape via terminal fill_cell placement_blockage }
win_set_filter -class cell -filter {cell_array cell_cover hard_macro_margin hard_margin route_blockage_margin soft_margin}
win_set_filter -class placement_blockage -filter {wiring} -layer {}
win_set_select_class {cell port plan_group group shape via placement_blockage }
report_timing
read_sdc  -version Latest "./MBF_APR.sdc"
#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/all_command_option_def.tcl

#@ define_proc_attributes all_physical_only_cells -info "Get the collection of physical only cells" -define_args {
#@ { -coordinates "coordinates of bounding box" "llx lly urx ury" string {optional}} 
#@ { -lib_cells "get cells related to these objects" "objects" list {optional}} 
#@ { -cell_name "list of cell name patterns and collections" "patterns" list {optional}} 
#@ { "" "Existing collection" "arguments" list {optional}} 
#@ }
#@ define_proc_attributes all_physical_only_nets  -info "Get the collection of physical only nets" -define_args {
#@ { "" "list of cell name patterns and collections" "arguments" list {optional}} 
#@ } 
#@ define_proc_attributes all_drc_violated_nets -info "Returns all DRC violated nets" -define_args { 
#@ { -max_capacitance "max Cap DRC violated nets" "" string {optional}} 
#@ { -max_transition "max transition time DRC violated nets" "" string {optional}} 
#@ { -max_fanout "max fanout DRC violated nets" "" string {optional}}
#@ { -threshold "Captures all values more than or equal to threshold" "threshold" string {optional}} 
#@ { -bound "Captures all values less than or equal to bound bound" "upper" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments"  list {optional}} 
#@ }
#@ define_proc_attributes all_fanin -info "return pins or cells in transitive fanin" -define_args { 
#@ { -to "set of sink ports, pins, or nets" "sink_list" list {optional}} 
#@ { -startpoints_only  "return only the timing startpoints" "" string {optional}} 
#@ { -exclude_bboxes "black-boxes are not included in return-set" "" string {optional}} 
#@ { -break_on_bboxes  "traversal stops at black-boxes" "" string {optional}} 
#@ { -only_cells "only cells are included in the return-set" "" string {optional}} 
#@ { -flat "trace entire design instead of just current hierarchy" "" string {optional}} 
#@ { -levels "maximum number of levels of logic to traverse" "n" string {optional}} 
#@ { -trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_high_fanout -info "Returns all high fanout objects" -define_args { 
#@ { -nets "high fanout nets" "" string {optional}} 
#@ { -threshold "high fanout threshold: value>=0" "threshold" string {optional}} 
#@ { -through_buf_inv "treat buffers and inverters as transparent -check for transitive fanout" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_ideal_nets -info "Returns all ideal nets" -define_args { 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_inputs -info "return input ports" -define_args { 
#@ { -clock "ports with input delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive input delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive input delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_outputs -info "return output ports" -define_args { 
#@ { -clock "ports with output delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive output delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive output delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_threestate -info "Returns all threestate objects" -define_args { 
#@ { -nets "threestate nets" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_dont_touch -info "Returns all dont touch objects" -define_args { 
#@ { -nets "Dont touch nets" "" string {optional}} 
#@ { -cells "Dont touch cells" "" string {optional}} 
#@ { "" "Dont touch patterns OR collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_size_only_cells -info "Returns all size_only cells" -define_args { 
#@ { "" "Object patterns OD collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_clocks -info "return all clocks in the current design"  
#@ define_proc_attributes all_designs -info "return all designs" 
#@ define_proc_attributes all_registers  -info "create a collection of register cells or pins" -define_args { 
#@ { -no_hierarchy "only search the top level of hierarchy" "" string {optional}} 
#@ {-rise_clock "return registers triggered by rise edge of this clock" "rise_clock" string {optional}}
#@ {-fall_clock "return registers triggered by rise edge of this clock" "fall_clock" string {optional}}
#@ { -clock "return registers of this clock" "clock" string {optional}} 
#@ { -cells "return cells - this is the default" "" string {optional}} 
#@ { -data_pins "return data_pins" "" string {optional}} 
#@ { -clock_pins "return clock_pins" "" string {optional}} 
#@ { -slave_clock_pins "return slave_clock_pin" "" string {optional}} 
#@ { -inverted_output "return FF's with inverted output phase" "" string {optional}} 
#@ { -output_pins "return output_pins" "" string {optional}} 
#@ { -level_sensitive "only consider level sensitive registers" "" string {optional}} 
#@ { -edge_triggered "only consider edge triggered register" "" string {optional}} 
#@ { -master_slave "only consider master/slave registers" "" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_cells -info "return critical cells" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_pins -info "return critical pins" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ { -type "pintype: Values: endpoint, startpoint" "pin_type" string {optional}} 
#@ }
#@ define_proc_attributes get_magnet_cells -info "return magnet cells collection" -define_args {
#@ { -stop_by_sequential_cells "don't pull sequential cells" "" string {optional}} 
#@ { -exclude_buffers "skip through buffers in levels" "" string {optional}} 
#@ { -exclude_cells "list of excluded cells list" "" string {optional}}
#@ { -logical_level "number of logical levels to pull for placement" "integer" string {optional}} 
#@ { -stop_points "list of stop points where to stop magnetizing paths" "object_list" list {optional}} 
#@ { "" "a list of magnet objects" "magnet_objects" list {optional}} 
#@ }
#@ define_proc_attributes all_fanout -info "return pins or cells in transitive fanout" -define_args {
#@ {-clock_tree "return all clock tree components in design" "" string {optional}}
#@ {-from "set of source ports, pins, or nets" "source_list" list {optional}}
#@ {-endpoints_only "return only the timing endpoints" "" string {optional}}
#@ {-exclude_bboxes "black-boxes are not included in return-set" "" string {optional}}
#@ {-break_on_bboxes "traversal stops at black-boxes" "" string {optional}}
#@ {-only_cells "only cells are included in the return-set" "" string {optional}}
#@ {-flat "trace entire design instead of just current hierarchy" "" string {optional}}
#@ {-levels "maximum number of levels of logic to traverse" "n" string {optional}}
#@ {-trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_physical_only_ports -info " Get the collection of physical only ports" -define_args {
#@ {"" "list of cell name patterns and collections" "arguments" list {optional}}
#@ }
#@ define_proc_attributes get_matching_nets_for_pattern -info "Get matched nets for a certain net pattern" -define_args { 
#@ { -pattern "pattern id" "integer" string {optional}} 
#@ { -optimizable "Return all nets that can be optimized" "" string {optional}} 
#@ { -transition_lower_limit "nets with transition equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -transition_upper_limit "nets with transition less than upper limit" "upper_limit" string {optional}} 
#@ { -setup_slack_lower_limit "nets with slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -setup_slack_upper_limit "nets with slack less than upper limit" "upper_limit" string {optional}} 
#@ { -hold_slack_lower_limit "nets with hold slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -hold_slack_upper_limit "nets with hold slack less than upper limit" "upper_limit" string {optional}} 
#@ }
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/all_command_option_def.tcl

report_timing
report_timing
report_timing
write_verilog -wire_declaration -keep_backslash_before_hiersep -no_physical_only_cells MBF_pr.v
write_sdf -version 2.1 MBF_pr.sdf
write_stream -format gds -lib_name /home/yutongshen/IC_contest/ICContest100_final/icc/CHIP -cells {route } MBF.gds
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {245.280 220.355}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {245.285 219.105}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {235.810 215.495}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {235.755 215.490}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {245.330 216.920}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {245.385 216.815}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {245.350 216.755}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {244.010 216.610}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {244.010 216.595}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {250.060 216.835}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {250.050 216.815}
win_select_objects -slct_targets global -at {248.745 216.330} -radius 0.0039
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {248.730 216.370}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {248.730 216.370}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {248.725 216.370}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {248.720 216.375}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {248.695 216.375}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {248.685 216.375}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {248.670 216.370}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {248.350 216.375}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {243.385 220.495}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {243.335 222.180}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {244.090 223.440}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {249.880 280.750}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {250.390 291.815}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {209.160 87.680}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {215.195 118.855}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {250.890 -10.360}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {192.065 239.525}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {192.565 241.535}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {194.075 228.715}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {195.585 226.450}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {192.065 219.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {308.210 142.985}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {307.960 142.985}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {298.785 145.875}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {298.480 145.620}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {300.560 145.900}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {300.565 145.900}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {300.550 145.895}
win_select_objects -slct_targets global -at {300.755 146.160} -radius 0.0039
win_select_objects -slct_targets global -at {300.125 146.095} -radius 0.0039
win_select_objects -slct_targets global -at {299.805 146.065} -radius 0.0039
win_select_objects -slct_targets global -at {300.345 146.005} -radius 0.0039
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {300.020 145.945}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {300.025 145.945}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {300.040 145.940}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {300.020 145.940}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {300.025 145.940}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {300.045 145.950}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {300.950 145.730}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {301.010 145.710}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {300.985 146.005}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {301.015 145.985}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {303.185 145.725}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {303.690 145.980}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {186.570 180.960}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {186.570 180.960}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {147.030 169.045}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {147.030 169.040}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {150.835 167.455}
change_selection 
win_select_objects -slct_targets global -at {146.530 165.200} -radius 0.0317
win_select_objects -slct_targets global -at {146.910 165.420} -radius 0.0317
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {150.905 165.865}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {150.875 165.860}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {150.855 165.865}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {150.855 165.865}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {151.145 165.900}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {151.840 165.995}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.785 167.510}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {158.575 167.635}
win_select_objects -slct_targets global -at {216.170 276.225} -radius 0.5074
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {198.410 209.245}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {196.890 206.705}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.985 206.450}
ll
verify_lvs -ignore_floating_port
gui_set_error_browser_option -show_mode all
gui_set_error_browser_option -view_mode zoom
gui_set_error_browser_option -zoom_factor 1.000000
gui_load_error_view -name {route_lvs.err}
gui_error_browser -show
gui_error_browser -hide
gui_error_browser -show
gui_set_current_errors -data_name {route_lvs.err;1}
gui_set_current_errors
gui_error_browser -hide
gui_error_browser -show
gui_error_browser -hide
gui_error_browser -show
verify_zrt_route
gui_error_browser -show
gui_error_browser -hide
get_attribute [get_die_area] bbox
read_sdc  -version Latest "./MBF_APR.sdc"
#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/all_command_option_def.tcl

#@ define_proc_attributes all_physical_only_cells -info "Get the collection of physical only cells" -define_args {
#@ { -coordinates "coordinates of bounding box" "llx lly urx ury" string {optional}} 
#@ { -lib_cells "get cells related to these objects" "objects" list {optional}} 
#@ { -cell_name "list of cell name patterns and collections" "patterns" list {optional}} 
#@ { "" "Existing collection" "arguments" list {optional}} 
#@ }
#@ define_proc_attributes all_physical_only_nets  -info "Get the collection of physical only nets" -define_args {
#@ { "" "list of cell name patterns and collections" "arguments" list {optional}} 
#@ } 
#@ define_proc_attributes all_drc_violated_nets -info "Returns all DRC violated nets" -define_args { 
#@ { -max_capacitance "max Cap DRC violated nets" "" string {optional}} 
#@ { -max_transition "max transition time DRC violated nets" "" string {optional}} 
#@ { -max_fanout "max fanout DRC violated nets" "" string {optional}}
#@ { -threshold "Captures all values more than or equal to threshold" "threshold" string {optional}} 
#@ { -bound "Captures all values less than or equal to bound bound" "upper" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments"  list {optional}} 
#@ }
#@ define_proc_attributes all_fanin -info "return pins or cells in transitive fanin" -define_args { 
#@ { -to "set of sink ports, pins, or nets" "sink_list" list {optional}} 
#@ { -startpoints_only  "return only the timing startpoints" "" string {optional}} 
#@ { -exclude_bboxes "black-boxes are not included in return-set" "" string {optional}} 
#@ { -break_on_bboxes  "traversal stops at black-boxes" "" string {optional}} 
#@ { -only_cells "only cells are included in the return-set" "" string {optional}} 
#@ { -flat "trace entire design instead of just current hierarchy" "" string {optional}} 
#@ { -levels "maximum number of levels of logic to traverse" "n" string {optional}} 
#@ { -trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_high_fanout -info "Returns all high fanout objects" -define_args { 
#@ { -nets "high fanout nets" "" string {optional}} 
#@ { -threshold "high fanout threshold: value>=0" "threshold" string {optional}} 
#@ { -through_buf_inv "treat buffers and inverters as transparent -check for transitive fanout" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_ideal_nets -info "Returns all ideal nets" -define_args { 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_inputs -info "return input ports" -define_args { 
#@ { -clock "ports with input delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive input delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive input delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_outputs -info "return output ports" -define_args { 
#@ { -clock "ports with output delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive output delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive output delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_threestate -info "Returns all threestate objects" -define_args { 
#@ { -nets "threestate nets" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_dont_touch -info "Returns all dont touch objects" -define_args { 
#@ { -nets "Dont touch nets" "" string {optional}} 
#@ { -cells "Dont touch cells" "" string {optional}} 
#@ { "" "Dont touch patterns OR collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_size_only_cells -info "Returns all size_only cells" -define_args { 
#@ { "" "Object patterns OD collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_clocks -info "return all clocks in the current design"  
#@ define_proc_attributes all_designs -info "return all designs" 
#@ define_proc_attributes all_registers  -info "create a collection of register cells or pins" -define_args { 
#@ { -no_hierarchy "only search the top level of hierarchy" "" string {optional}} 
#@ {-rise_clock "return registers triggered by rise edge of this clock" "rise_clock" string {optional}}
#@ {-fall_clock "return registers triggered by rise edge of this clock" "fall_clock" string {optional}}
#@ { -clock "return registers of this clock" "clock" string {optional}} 
#@ { -cells "return cells - this is the default" "" string {optional}} 
#@ { -data_pins "return data_pins" "" string {optional}} 
#@ { -clock_pins "return clock_pins" "" string {optional}} 
#@ { -slave_clock_pins "return slave_clock_pin" "" string {optional}} 
#@ { -inverted_output "return FF's with inverted output phase" "" string {optional}} 
#@ { -output_pins "return output_pins" "" string {optional}} 
#@ { -level_sensitive "only consider level sensitive registers" "" string {optional}} 
#@ { -edge_triggered "only consider edge triggered register" "" string {optional}} 
#@ { -master_slave "only consider master/slave registers" "" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_cells -info "return critical cells" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_pins -info "return critical pins" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ { -type "pintype: Values: endpoint, startpoint" "pin_type" string {optional}} 
#@ }
#@ define_proc_attributes get_magnet_cells -info "return magnet cells collection" -define_args {
#@ { -stop_by_sequential_cells "don't pull sequential cells" "" string {optional}} 
#@ { -exclude_buffers "skip through buffers in levels" "" string {optional}} 
#@ { -exclude_cells "list of excluded cells list" "" string {optional}}
#@ { -logical_level "number of logical levels to pull for placement" "integer" string {optional}} 
#@ { -stop_points "list of stop points where to stop magnetizing paths" "object_list" list {optional}} 
#@ { "" "a list of magnet objects" "magnet_objects" list {optional}} 
#@ }
#@ define_proc_attributes all_fanout -info "return pins or cells in transitive fanout" -define_args {
#@ {-clock_tree "return all clock tree components in design" "" string {optional}}
#@ {-from "set of source ports, pins, or nets" "source_list" list {optional}}
#@ {-endpoints_only "return only the timing endpoints" "" string {optional}}
#@ {-exclude_bboxes "black-boxes are not included in return-set" "" string {optional}}
#@ {-break_on_bboxes "traversal stops at black-boxes" "" string {optional}}
#@ {-only_cells "only cells are included in the return-set" "" string {optional}}
#@ {-flat "trace entire design instead of just current hierarchy" "" string {optional}}
#@ {-levels "maximum number of levels of logic to traverse" "n" string {optional}}
#@ {-trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_physical_only_ports -info " Get the collection of physical only ports" -define_args {
#@ {"" "list of cell name patterns and collections" "arguments" list {optional}}
#@ }
#@ define_proc_attributes get_matching_nets_for_pattern -info "Get matched nets for a certain net pattern" -define_args { 
#@ { -pattern "pattern id" "integer" string {optional}} 
#@ { -optimizable "Return all nets that can be optimized" "" string {optional}} 
#@ { -transition_lower_limit "nets with transition equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -transition_upper_limit "nets with transition less than upper limit" "upper_limit" string {optional}} 
#@ { -setup_slack_lower_limit "nets with slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -setup_slack_upper_limit "nets with slack less than upper limit" "upper_limit" string {optional}} 
#@ { -hold_slack_lower_limit "nets with hold slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -hold_slack_upper_limit "nets with hold slack less than upper limit" "upper_limit" string {optional}} 
#@ }
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/all_command_option_def.tcl

report_timing
read_sdc  -version Latest "./MBF_APR.sdc"
#@ # -- Starting source /home/nfs_cad/synopsys/icc/cur/auxx/syn/all_command_option_def.tcl

#@ define_proc_attributes all_physical_only_cells -info "Get the collection of physical only cells" -define_args {
#@ { -coordinates "coordinates of bounding box" "llx lly urx ury" string {optional}} 
#@ { -lib_cells "get cells related to these objects" "objects" list {optional}} 
#@ { -cell_name "list of cell name patterns and collections" "patterns" list {optional}} 
#@ { "" "Existing collection" "arguments" list {optional}} 
#@ }
#@ define_proc_attributes all_physical_only_nets  -info "Get the collection of physical only nets" -define_args {
#@ { "" "list of cell name patterns and collections" "arguments" list {optional}} 
#@ } 
#@ define_proc_attributes all_drc_violated_nets -info "Returns all DRC violated nets" -define_args { 
#@ { -max_capacitance "max Cap DRC violated nets" "" string {optional}} 
#@ { -max_transition "max transition time DRC violated nets" "" string {optional}} 
#@ { -max_fanout "max fanout DRC violated nets" "" string {optional}}
#@ { -threshold "Captures all values more than or equal to threshold" "threshold" string {optional}} 
#@ { -bound "Captures all values less than or equal to bound bound" "upper" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments"  list {optional}} 
#@ }
#@ define_proc_attributes all_fanin -info "return pins or cells in transitive fanin" -define_args { 
#@ { -to "set of sink ports, pins, or nets" "sink_list" list {optional}} 
#@ { -startpoints_only  "return only the timing startpoints" "" string {optional}} 
#@ { -exclude_bboxes "black-boxes are not included in return-set" "" string {optional}} 
#@ { -break_on_bboxes  "traversal stops at black-boxes" "" string {optional}} 
#@ { -only_cells "only cells are included in the return-set" "" string {optional}} 
#@ { -flat "trace entire design instead of just current hierarchy" "" string {optional}} 
#@ { -levels "maximum number of levels of logic to traverse" "n" string {optional}} 
#@ { -trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_high_fanout -info "Returns all high fanout objects" -define_args { 
#@ { -nets "high fanout nets" "" string {optional}} 
#@ { -threshold "high fanout threshold: value>=0" "threshold" string {optional}} 
#@ { -through_buf_inv "treat buffers and inverters as transparent -check for transitive fanout" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_ideal_nets -info "Returns all ideal nets" -define_args { 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_inputs -info "return input ports" -define_args { 
#@ { -clock "ports with input delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive input delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive input delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_outputs -info "return output ports" -define_args { 
#@ { -clock "ports with output delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive output delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive output delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_threestate -info "Returns all threestate objects" -define_args { 
#@ { -nets "threestate nets" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_dont_touch -info "Returns all dont touch objects" -define_args { 
#@ { -nets "Dont touch nets" "" string {optional}} 
#@ { -cells "Dont touch cells" "" string {optional}} 
#@ { "" "Dont touch patterns OR collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_size_only_cells -info "Returns all size_only cells" -define_args { 
#@ { "" "Object patterns OD collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_clocks -info "return all clocks in the current design"  
#@ define_proc_attributes all_designs -info "return all designs" 
#@ define_proc_attributes all_registers  -info "create a collection of register cells or pins" -define_args { 
#@ { -no_hierarchy "only search the top level of hierarchy" "" string {optional}} 
#@ {-rise_clock "return registers triggered by rise edge of this clock" "rise_clock" string {optional}}
#@ {-fall_clock "return registers triggered by rise edge of this clock" "fall_clock" string {optional}}
#@ { -clock "return registers of this clock" "clock" string {optional}} 
#@ { -cells "return cells - this is the default" "" string {optional}} 
#@ { -data_pins "return data_pins" "" string {optional}} 
#@ { -clock_pins "return clock_pins" "" string {optional}} 
#@ { -slave_clock_pins "return slave_clock_pin" "" string {optional}} 
#@ { -inverted_output "return FF's with inverted output phase" "" string {optional}} 
#@ { -output_pins "return output_pins" "" string {optional}} 
#@ { -level_sensitive "only consider level sensitive registers" "" string {optional}} 
#@ { -edge_triggered "only consider edge triggered register" "" string {optional}} 
#@ { -master_slave "only consider master/slave registers" "" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_cells -info "return critical cells" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_pins -info "return critical pins" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ { -type "pintype: Values: endpoint, startpoint" "pin_type" string {optional}} 
#@ }
#@ define_proc_attributes get_magnet_cells -info "return magnet cells collection" -define_args {
#@ { -stop_by_sequential_cells "don't pull sequential cells" "" string {optional}} 
#@ { -exclude_buffers "skip through buffers in levels" "" string {optional}} 
#@ { -exclude_cells "list of excluded cells list" "" string {optional}}
#@ { -logical_level "number of logical levels to pull for placement" "integer" string {optional}} 
#@ { -stop_points "list of stop points where to stop magnetizing paths" "object_list" list {optional}} 
#@ { "" "a list of magnet objects" "magnet_objects" list {optional}} 
#@ }
#@ define_proc_attributes all_fanout -info "return pins or cells in transitive fanout" -define_args {
#@ {-clock_tree "return all clock tree components in design" "" string {optional}}
#@ {-from "set of source ports, pins, or nets" "source_list" list {optional}}
#@ {-endpoints_only "return only the timing endpoints" "" string {optional}}
#@ {-exclude_bboxes "black-boxes are not included in return-set" "" string {optional}}
#@ {-break_on_bboxes "traversal stops at black-boxes" "" string {optional}}
#@ {-only_cells "only cells are included in the return-set" "" string {optional}}
#@ {-flat "trace entire design instead of just current hierarchy" "" string {optional}}
#@ {-levels "maximum number of levels of logic to traverse" "n" string {optional}}
#@ {-trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_physical_only_ports -info " Get the collection of physical only ports" -define_args {
#@ {"" "list of cell name patterns and collections" "arguments" list {optional}}
#@ }
#@ define_proc_attributes get_matching_nets_for_pattern -info "Get matched nets for a certain net pattern" -define_args { 
#@ { -pattern "pattern id" "integer" string {optional}} 
#@ { -optimizable "Return all nets that can be optimized" "" string {optional}} 
#@ { -transition_lower_limit "nets with transition equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -transition_upper_limit "nets with transition less than upper limit" "upper_limit" string {optional}} 
#@ { -setup_slack_lower_limit "nets with slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -setup_slack_upper_limit "nets with slack less than upper limit" "upper_limit" string {optional}} 
#@ { -hold_slack_lower_limit "nets with hold slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -hold_slack_upper_limit "nets with hold slack less than upper limit" "upper_limit" string {optional}} 
#@ }
#@ # -- End source /home/nfs_cad/synopsys/icc/cur/auxx/syn/all_command_option_def.tcl

report_timing
win_select_objects -slct_targets global -at {195.245 195.540} -radius 0.0634
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.420 198.520}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.595 198.605}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.035 200.785}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.035 200.780}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {194.135 200.480}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {194.155 200.440}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {193.930 200.440}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {193.940 200.445}
history
win_select_objects -slct_targets global -at {206.325 197.210} -radius 0.0635
win_select_objects -slct_targets global -at {206.070 198.480} -radius 0.0635
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {206.070 198.480}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {206.080 198.470}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {206.080 198.465}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {206.080 198.465}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {206.080 198.465}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {206.080 198.465}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {206.070 198.465}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {206.040 198.470}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {199.960 205.030}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {198.495 206.810}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {192.895 216.365}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {193.145 216.365}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {244.620 122.080}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {266.025 15.570}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {262.715 5.375}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {262.715 5.375}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {263.105 4.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {263.110 4.400}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {264.175 6.070}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {263.895 6.155}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {263.430 6.430}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {262.420 6.920}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {265.605 -1.615}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {269.180 -6.460}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {166.195 120.990}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {166.705 124.050}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {153.960 169.930}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {153.965 169.930}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {153.965 169.930}
win_select_objects -slct_targets global -at {156.390 165.110} -radius 0.0319
win_select_objects -slct_targets global -at {158.335 165.525} -radius 0.0319
win_select_objects -slct_targets global -at {146.515 164.410} -radius 0.0319
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {152.855 166.925}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {152.860 166.925}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {153.115 166.840}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {153.330 166.845}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {156.215 167.355}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {156.385 167.375}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {166.920 167.425}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {166.800 167.545}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {-118.340 160.660}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {-37.745 220.850}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {-18.870 220.850}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {16.325 214.985}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {16.450 214.470}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {4.910 203.755}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {6.950 205.955}
win_select_objects -slct_targets global -at {7.780 208.025} -radius 0.0159
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.955 207.735}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.910 207.730}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.900 207.790}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.900 207.790}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.900 207.790}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.900 207.790}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.900 207.790}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.895 207.785}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.895 207.780}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.890 207.785}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.955 207.525}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.955 207.515}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.825 207.470}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {8.015 207.615}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {8.025 207.605}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {8.030 207.605}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {8.025 207.605}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {8.055 207.580}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.115 207.925}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.115 207.920}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.555 207.770}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.555 207.765}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.560 207.765}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.555 207.765}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.565 207.765}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.560 207.775}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.430 206.545}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.420 206.530}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.055 207.040}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {6.990 207.170}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {4.220 151.640}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {4.220 151.640}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {4.220 151.635}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {4.220 151.605}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {1.485 153.465}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {12.965 162.375}
win_select_objects -slct_targets global -at {11.280 160.730} -radius 0.0165
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {10.190 162.545}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {10.170 162.590}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {10.155 162.650}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {10.155 162.655}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {9.475 162.970}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {9.475 162.985}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {13.140 168.935}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {14.130 171.890}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {29.055 28.870}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {25.620 30.455}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {16.310 48.730}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {12.945 44.475}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {12.940 44.455}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {11.755 44.320}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {11.025 43.855}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {10.795 43.790}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {10.765 43.785}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {10.765 43.785}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {11.035 43.625}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {11.100 43.630}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {17.705 44.290}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {15.855 170.880}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {15.855 170.875}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {11.760 163.210}
win_select_objects -slct_targets global -at {14.205 153.560} -radius 0.0661
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -start RulerTool
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -add_point {12.555 144.510} -scale 0.0661
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -reset
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -reset
win_select_objects -slct_targets global -at {25.700 148.540} -radius 0.0661
::iccGUI::open_mw_cel  -readonly  rom_1024x4_t13.FRAM
open_mw_cel -readonly rom_1024x4_t13.FRAM
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {13.655 92.290}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {6.120 114.420}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {16.010 117.480}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {94.645 116.300}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {95.115 116.770}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {105.475 158.210}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {105.475 157.265}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {108.770 161.035}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {108.770 158.680}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {109.950 155.500}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {109.895 155.385}
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -start RulerTool
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -add_point {110.600 156.325} -scale 0.0294
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -reset
gui_mouse_tool -window [gui_get_current_window -types Layout -mru] -reset
change_working_design_stack {route.CEL;1}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {13.745 173.845}
change_working_design_stack {rom_1024x4_t13.FRAM;1}
win_select_objects -slct_targets global -at {108.160 143.080} -radius 0.0294
change_working_design_stack {route.CEL;1}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {12.720 167.840}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {12.505 168.135}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {12.720 167.990}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {12.690 168.655}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {6.080 159.605}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {9.515 151.540}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {192.970 194.630}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {195.350 190.925}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {149.225 159.735}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {164.230 167.130}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {165.390 167.785}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {165.665 168.045}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.325 167.225}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.490 167.560}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {163.610 167.025}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.925 163.580}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.400 164.505}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {157.135 164.970}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.405 163.970}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.600 163.710}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {158.540 164.980}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {161.055 164.800}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {160.775 165.120}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {160.810 165.140}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {160.990 165.210}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {163.060 165.325}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {163.005 164.980}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {163.025 164.960}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {164.080 177.145}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {163.955 180.850}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {129.790 10.530}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {134.555 -2.445}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {134.955 -1.385}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {135.615 6.090}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {128.395 4.875}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {127.815 4.205}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {127.815 4.140}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {113.380 16.850}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {108.610 0.955}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {108.080 144.535}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {108.080 144.535}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {109.935 164.135}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {112.985 161.220}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {114.975 163.470}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {114.975 163.470}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {113.385 162.275}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {105.310 154.585}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {117.830 158.360}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {121.405 157.630}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {121.625 157.465}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {122.960 156.400}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {-1.325 163.815}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {9.275 164.735}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {9.275 164.730}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.520 166.350}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {7.655 166.325}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.660 166.350}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.655 166.380}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.390 166.505}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.360 166.500}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.425 166.485}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {7.425 166.610}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {112.445 152.815}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {112.975 154.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {140.825 159.970}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {115.300 155.855}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {165.775 170.030}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {165.575 170.030}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {164.520 169.165}
win_select_objects -slct_targets global -at {161.685 165.000} -radius 0.0166
win_select_objects -slct_targets global -at {161.105 165.945} -radius 0.0166
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {162.000 165.365}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.050 165.010}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.050 165.015}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.165 165.080}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.180 165.065}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {161.525 165.125}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {161.395 165.120}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {166.175 245.025}
win_select_objects -slct_targets global -at {146.795 246.880} -radius 0.2655
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {257.490 266.525}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {220.195 246.215}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {220.665 248.540}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {220.740 249.000}
gui_show_map -window [gui_get_current_window -types Layout -mru] -map {CLOCK_TREES} -show {true}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {159.025 323.065}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {149.470 325.455}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {146.350 324.125}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {146.540 323.995}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {147.345 320.675}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {147.610 320.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {166.725 59.175}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {180.530 104.310}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {176.280 105.900}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {182.650 99.530}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {183.715 98.465}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {186.370 96.345}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {188.495 96.345}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.865 91.430}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {194.875 91.415}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {197.765 95.560}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {197.770 95.590}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {197.780 95.595}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {197.995 95.775}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {198.040 95.745}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {198.040 95.745}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {197.980 95.745}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {197.980 95.745}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {198.055 95.740}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {198.065 95.730}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {198.020 95.725}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {198.015 95.720}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {199.015 94.205}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {199.275 93.980}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {199.000 92.500}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {199.135 92.235}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {85.265 56.345}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {228.810 251.160}
win_select_objects -slct_targets global -at {247.160 268.430} -radius 0.5396
win_select_objects -slct_targets global -at {233.670 264.115} -radius 0.5396
win_select_objects -within { 226.655 268.430 230.970 269.510 } -slct_targets global -slct_targets_operation clear
win_select_objects -slct_targets global -at {118.185 243.065} -radius 0.5396
win_select_objects -slct_targets global -at {120.340 247.385} -radius 0.5396
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {178.625 172.915}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {178.355 172.645}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {177.275 169.945}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {177.815 169.675}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {183.485 169.130}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {70.155 125.955}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {73.395 125.960}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {76.365 129.465}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {160.280 93.035}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {160.280 92.770}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {160.285 92.760}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {161.905 94.715}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {161.915 94.735}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {161.310 94.855}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {161.370 94.845}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {164.330 93.980}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {164.595 93.850}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.975 92.770}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.980 93.035}
win_select_objects -slct_targets global -at {212.630 215.540} -radius 1.0793
win_select_objects -slct_targets global -at {216.945 232.810} -radius 1.0793
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {121.965 179.925}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {133.835 220.940}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {133.835 217.700}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {126.280 224.715}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {120.615 232.810}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {142.335 240.230}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {142.205 240.365}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {138.775 240.895}
win_select_objects -slct_targets global -at {132.990 246.960} -radius 0.0675
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.685 237.375}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.480 237.480}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {155.765 236.600}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.595 236.640}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.565 236.685}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.095 236.980}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.090 236.950}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.100 236.945}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {154.975 237.075}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {92.880 274.330}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {95.040 269.470}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {100.035 261.910}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {100.845 261.370}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {102.465 247.225}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {101.995 247.190}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {101.955 247.085}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {101.785 247.075}
win_select_objects -slct_targets global -at {101.615 247.090} -radius 0.0021
win_select_objects -slct_targets global -at {101.590 247.455} -radius 0.0021
win_select_objects -slct_targets global -at {101.485 247.030} -radius 0.0021
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {101.415 246.935}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {101.405 246.940}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.405 246.965}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.405 246.965}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.400 246.965}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.365 246.990}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.455 247.845}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.420 247.845}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {102.015 249.145}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {102.045 249.460}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {101.570 249.940}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {218.925 230.560}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {218.655 230.560}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {219.700 235.055}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {218.385 234.255}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.320 233.390}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.185 233.195}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.790 233.005}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.190 232.730}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.075 232.730}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.920 232.965}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.095 232.255}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {214.460 224.565}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.645 237.320}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.645 237.320}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.505 240.020}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.510 240.020}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.220 243.310}
win_select_objects -slct_targets global -at {217.265 242.880} -radius 0.0087
win_select_objects -slct_targets global -at {217.310 241.375} -radius 0.0087
win_select_objects -slct_targets global -at {217.455 242.240} -radius 0.0087
win_select_objects -slct_targets global -at {217.575 241.720} -radius 0.0087
win_select_objects -slct_targets global -at {217.430 242.170} -radius 0.0087
win_select_objects -slct_targets global -at {217.325 242.440} -radius 0.0087
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.665 241.605}
win_select_objects -slct_targets global -at {217.420 241.460} -radius 0.0043
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.450 241.200}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.455 241.210}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.480 241.245}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {219.995 244.985}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {221.585 245.230}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {213.410 241.475}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {213.545 241.615}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {212.715 255.495}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {212.715 255.495}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {212.715 255.495}
win_select_objects -slct_targets global -at {213.975 246.955} -radius 0.0694
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {218.280 249.245}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {218.965 249.250}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {219.100 249.390}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {149.955 347.690}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {185.500 71.105}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {171.615 159.415}
win_select_objects -slct_targets global -at {114.135 245.220} -radius 0.2777
win_select_objects -slct_targets global -at {114.965 246.330} -radius 0.2777
win_select_objects -slct_targets global -at {118.020 247.445} -radius 0.2777
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {141.905 154.970}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {142.045 154.275}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {144.260 163.095}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {144.265 162.990}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {143.760 163.315}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {143.760 163.310}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {144.175 163.315}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {144.880 162.955}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {145.015 162.955}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {210.580 156.010}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {133.350 156.565}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {133.350 156.565}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {159.735 133.235}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {159.740 133.230}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {159.740 133.230}
win_select_objects -slct_targets global -at {159.360 133.990} -radius 0.0347
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {158.425 132.010}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {158.425 132.005}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {158.440 131.850}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {158.495 131.835}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {158.550 131.695}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {158.545 131.700}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {160.765 137.890}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {160.905 138.445}
gui_show_map -window [gui_get_current_window -types Layout -mru] -map {AREAPARTITION} -show {true}
gui_show_map -window [gui_get_current_window -types Layout -mru] -map {voltage_drop} -show {true}
load_fp_rail_map -type IR -net VDD
load_fp_rail_map -type IR -net VDD
analyze_fp_rail  -nets {VDD VSS} -power_budget 1000
synthesize_fp_rail  -nets {VDD VSS} -synthesize_power_plan -synthesize_power_pads -power_budget 1000 -use_strap_ends_as_pads
load_fp_rail_map -nets VDD -type IR -min 0.000000 -max 0.000000 -directory ./pna_output
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {151.735 144.835}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {152.290 144.280}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {153.400 145.945}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {159.240 175.960}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {166.045 169.985}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {162.500 178.115}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {162.500 178.080}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {162.505 178.075}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.515 177.715}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.510 177.675}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.545 177.690}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.540 177.665}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.605 177.595}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {160.945 173.975}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {112.855 142.565}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {110.075 138.120}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {110.635 133.805}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {110.630 133.670}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {110.630 133.670}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {110.075 133.115}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {108.965 133.115}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {257.955 108.655}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {266.850 99.760}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {264.625 95.315}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {225.155 10.255}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {226.540 9.705}
win_select_objects -slct_targets global -at {225.010 15.820} -radius 0.139
win_select_objects -slct_targets global -at {223.480 17.070} -radius 0.139
win_select_objects -slct_targets global -at {225.010 17.630} -radius 0.139
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {225.010 18.460}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {225.015 18.450}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {225.030 18.465}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {225.060 18.460}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {225.055 18.400}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {225.190 20.765}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {225.190 20.765}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {84.515 193.135}
win_select_objects -slct_targets global -at {27.245 199.250} -radius 0.556
win_select_objects -slct_targets global -at {299.140 116.960} -radius 0.556
change_selection 
win_select_objects -within { 315.265 198.140 316.380 202.030 } -slct_targets global -slct_targets_operation clear
win_select_objects -slct_targets global -at {312.485 162.555} -radius 0.556
change_selection 
win_select_objects -slct_targets global -at {162.915 176.455} -radius 0.556
win_select_objects -slct_targets global -at {166.805 187.020} -radius 0.556
win_select_objects -slct_targets global -at {162.360 177.010} -radius 0.556
gui_scroll -window [gui_get_current_window -view] -hrel 0.25
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {140.120 165.335}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {137.755 177.720}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {137.620 177.875}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {137.760 177.750}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {126.130 178.455}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {127.945 178.050}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {127.820 178.480}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {165.930 184.150}
report_clock_tree -summary
report_timing
change_selection 
gui_show_map -window [gui_get_current_window -types Layout -mru] -map {placementSpacingLabel} -show {true}
gui_set_map_option -map {placementSpacingLabel} -option {search_extent} -value {0.41}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {189.760 176.575}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {189.575 176.725}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {191.585 181.285}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {191.395 181.435}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {191.205 181.580}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {219.280 185.300}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.145 187.500}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.135 191.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.130 191.405}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.305 191.665}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.310 191.665}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.305 191.765}
win_select_objects -slct_targets global -at {217.280 191.495} -radius 0.0021
win_select_objects -slct_targets global -at {217.240 191.425} -radius 0.0021
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.270 191.420}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.275 191.425}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.270 191.420}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.275 191.410}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {215.650 190.975}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {215.625 191.000}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {215.620 191.000}
win_select_objects -slct_targets global -at {199.930 162.880} -radius 0.2716
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.550 171.030}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.615 171.055}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.620 171.075}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {205.745 172.380}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {205.750 172.380}
win_select_objects -slct_targets global -at {206.000 172.540} -radius 0.0084
win_select_objects -slct_targets global -at {205.825 172.235} -radius 0.0084
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {205.815 171.790}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {205.805 171.765}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {205.805 171.775}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {203.025 170.605}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {202.960 170.630}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {218.775 193.255}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {218.155 193.655}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.740 193.790}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.225 190.775}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.185 190.750}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.085 190.980}
win_select_objects -slct_targets global -at {217.520 191.375} -radius 0.0042
win_select_objects -slct_targets global -at {217.065 191.335} -radius 0.0042
win_select_objects -slct_targets global -at {217.210 190.555} -radius 0.0042
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.270 191.350}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.330 191.205}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.375 191.095}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.405 190.745}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.370 190.675}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.270 190.665}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {217.265 190.665}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {216.790 189.740}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.775 189.740}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.765 189.730}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.300 189.995}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.285 189.935}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {216.205 189.810}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {218.105 185.980}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {215.775 189.295}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {230.355 100.675}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {220.625 91.405}
win_select_objects -slct_targets global -at {46.930 91.645} -radius 0.5273
win_select_objects -slct_targets global -at {55.365 196.045} -radius 0.5273
change_selection 
win_select_objects -slct_targets global -at {207.750 114.845} -radius 0.5273
win_select_objects -slct_targets global -at {233.585 135.935} -radius 0.5273
win_select_objects -slct_targets global -at {245.185 147.535} -radius 0.5273
win_select_objects -slct_targets global -at {233.060 138.045} -radius 0.5273
win_select_objects -slct_targets global -at {235.695 148.590} -radius 0.5273
win_select_objects -slct_targets global -at {243.075 143.320} -radius 0.5273
win_select_objects -slct_targets global -at {234.640 136.465} -radius 0.5273
win_select_objects -slct_targets global -at {180.330 65.280} -radius 0.5273
win_select_objects -slct_targets global -at {122.330 99.025} -radius 0.5273
win_select_objects -slct_targets global -at {113.365 199.735} -radius 0.5273
win_select_objects -slct_targets global -at {118.640 127.500} -radius 0.5273
win_select_objects -slct_targets global -at {122.855 190.775} -radius 0.5273
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {122.855 147.535}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {146.440 150.090}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {147.085 150.135}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {161.195 162.405}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {136.285 150.105}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {136.410 150.020}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {136.800 149.155}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {217.825 163.470}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {221.795 162.590}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {221.835 162.495}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {198.125 160.835}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {197.735 160.675}
win_select_objects -slct_targets global -at {200.700 163.580} -radius 0.0326
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.800 158.335}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.895 158.345}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {205.550 158.245}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {205.480 158.280}
win_select_objects -slct_targets global -at {143.255 212.690} -radius 0.519
win_select_objects -slct_targets global -at {123.010 145.215} -radius 0.519
win_select_objects -slct_targets global -at {136.505 223.590} -radius 0.519
win_select_objects -slct_targets global -at {107.960 133.275} -radius 0.519
win_select_objects -slct_targets global -at {121.455 184.660} -radius 0.519
win_select_objects -slct_targets global -at {143.775 127.570} -radius 0.519
win_select_objects -slct_targets global -at {114.190 195.560} -radius 0.519
win_select_objects -slct_targets global -at {90.310 143.140} -radius 0.519
win_select_objects -slct_targets global -at {99.135 184.145} -radius 0.519
win_select_objects -slct_targets global -at {97.060 143.140} -radius 0.519
win_select_objects -slct_targets global -at {113.670 181.545} -radius 0.519
win_select_objects -slct_targets global -at {109.515 138.465} -radius 0.519
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {202.945 117.705}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {202.480 117.660}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.985 120.205}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.985 120.215}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.750 120.230}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.180 120.455}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.170 120.455}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.145 120.460}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {200.145 120.460}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {200.005 120.415}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {199.995 120.410}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {200.130 120.460}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {200.130 120.460}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {200.145 120.455}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {200.515 120.515}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {200.640 120.585}
gui_show_map -window [gui_get_current_window -types Layout -mru] -map {placementSpacingLabel} -show {false}
gui_show_map -window [gui_get_current_window -types Layout -mru] -map {CLOCK_TREES} -show {false}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.420 124.305}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.420 124.305}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.165 124.495}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {204.170 124.490}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.335 124.495}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.370 124.500}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.760 124.670}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.940 124.685}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.935 124.685}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {204.810 124.680}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {426.010 120.585}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {542.750 121.100}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {301.075 134.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {301.075 134.410}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {122.885 87.305}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {122.630 87.305}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {177.545 109.065}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {173.385 106.760}
win_select_objects -slct_targets global -at {169.455 106.750} -radius 0.032
win_select_objects -slct_targets global -at {167.855 106.145} -radius 0.032
change_selection 
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {168.975 106.175}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {168.975 106.175}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {169.055 106.180}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {169.055 106.180}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.175 106.205}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.170 106.210}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.170 106.210}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.060 106.025}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {168.925 105.895}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {163.025 103.755}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {162.065 103.370}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {165.520 106.320}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {168.600 104.010}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {169.110 103.500}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {168.085 68.650}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {168.085 65.575}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {168.085 65.575}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {165.780 38.675}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {172.185 33.805}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {146.565 219.315}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {148.615 213.165}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {158.860 228.540}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {141.440 140.395}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {120.940 89.150}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {139.900 82.490}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {139.385 171.145}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {138.360 171.145}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {138.365 164.995}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {145.535 169.605}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {178.335 248.010}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {149.125 168.070}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {152.710 85.055}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {195.755 269.535}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {157.835 152.695}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {153.220 65.070}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {193.705 235.715}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {166.545 204.455}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {174.230 143.475}
gui_zoom -window [gui_get_current_window -view] -full
gui_zoom -window [gui_get_current_window -view] -full
gui_scroll -habs 391.545 -vabs 117.420 -window [gui_get_current_window -view]
gui_zoom -window [gui_get_current_window -view] -full
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {97.550 162.125}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {97.775 162.125}
win_select_objects -slct_targets global -at {80.500 149.595} -radius 0.1129
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {111.545 156.820}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {111.550 156.650}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {112.055 156.425}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {113.610 156.665}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {113.710 156.695}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {114.260 156.760}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {114.265 156.810}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {109.075 162.790}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {109.750 165.725}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {136.400 126.880}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {175.240 135.010}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {174.565 132.075}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {173.210 137.045}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {173.215 137.035}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {173.220 137.035}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {173.220 137.030}
gui_zoom -window [gui_get_current_window -view] -factor 2 -at_point {154.475 55.050}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {153.800 88.700}
gui_zoom -window [gui_get_current_window -view] -factor 0.5 -at_point {155.830 88.475}
gui_zoom -window [gui_get_current_window -view] -full
change_selection 
gui_clear_selected_errors
